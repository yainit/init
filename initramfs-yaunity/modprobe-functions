#
#  MODPROBE-FUNCTIONS
#  for Universal INIT with BusyBox
#  (C) Dieter Miosga, 2008-2016-01-13, dmiosga6200@gmail.com
#
#echo   "modprobe-functions: Being read in...."
#
check_for_depmod()
{
   local DEPMOD MODULEFILES RC
   DEPMOD=""
   RC=""
   MODULEFILES="modules.dep modules.alias modules.order"
   for file in $MODULEFILES; do
     if [ -e /lib/modules/$KERNVER/$file  ]; then
       echodebug  "$INITPREF" "File '$file' found for $KERNVER, continuing..."
     else
       echodebug  "$INITPREF" "File '$file' not found for $KERNVER "
       DEPMOD="depmod"
       break
     fi
   done
   if [ "$DEPMOD" != "" ]; then
     echoconsole  "$INITPREF" " Creating module dependencies for $KERNVER ...."
     /bin/busybox depmod  >/dev/null 2>&1
     RC=$?
     /bin/busybox sync 2>/dev/null
     echoconsole  "$INITPREF" "... done with '$RC' !"
   else
     echoconsole  "$INITPREF" "$MODULEFILES exist, no 'depmod' necessary, continuing..."
   fi
}
#
probe_kernelmodule()
{
   local DRIVER RC
   DRIVER=""
   RC=127
   if [ "$1" != "" ]; then
     DRIVER="$1"
     # the blank to check is important due to tautologies!
     if `is_not_string_in_file  "$DRIVER " "/proc/modules" `; then
       if `is_substring_of " $DRIVER " " $BLACKLIST_MODULES "`; then
         RC=7
       else
         /bin/busybox modprobe "$DRIVER"  2>/dev/null
         RC=$?
       fi
     else
       RC=5
     fi  #echofile "$INITPREF" "probed for kernelmodule '$DRIVER' with '$RC'"
   fi
   return $RC
}
#
probe_kernelmodule_debug()
{
   local DRIVER RC
   DRIVER=""
   RC=127
   if [ "$1" != "" ]; then
    DRIVER="$1"
    if `is_string_in_file  "$DRIVER " "/proc/modules" `; then
      echoconsole  "$INITPREF" "Driver '$DRIVER' already loaded"
      RC=5
    else
     if `is_not_substring_of "$DRIVER " " $BLACKLIST_MODULES "`; then
      /bin/busybox modprobe -v "$DRIVER"  2>/dev/null
      RC=$?
      echoconsole  "$INITPREF" "probed for kernelmodule '$DRIVER' with '$RC'"
      if `is_string_in_file  "$DRIVER " "/proc/modules" `; then
        echoconsole  "$INITPREF" "kernelmodule '$DRIVER' successfully loaded with '$RC'"
      else
        echoconsole  "$INITPREF" "kernelmodule '$DRIVER' failed or not yet loaded with '$RC'"
      fi
     else
       RC=7
       echoconsole  "$INITPREF" "Not probed for kernelmodule '$DRIVER' : blacklisted '$RC'"
     fi
    fi
   fi
   return $RC
}
#
remove_kernelmodule_debug()
{
  DRIVER=""
  EC=127
  if [ "$1" != "" ]; then
    DRIVER="$1"
    if `is_not_string_in_file  "$DRIVER " "/proc/modules" `; then
      echoconsole  "$INITPREF" "Driver '$DRIVER' not loaded"
      RC=5
    else
      /bin/busybox rmmod "$DRIVER" 2>/dev/null
      RC=$?
      if [ $RC -eq 0 ]; then 
        echoconsole  "$INITPREF" "succesfully removed kernelmodule '$DRIVER' with '$RC'"
      else
        if `is_string_in_file  "$DRIVER " "/proc/modules" `; then
          echoconsole  "$INITPREF" "kernelmodule '$DRIVER' not removed:  with '$RC'"
        else
          echoconsole  "$INITPREF" "kernelmodule '$DRIVER' removed with '$RC'"
        fi
      fi
      return $?
    fi
  else
    return 127
  fi
}
#
remove_kernelmodule()
{
  DRIVER="$1"
  if `is_string_in_file  "$DRIVER " "/proc/modules" `; then
    /bin/busybox rmmod "$DRIVER" 2>/dev/null
    return $?
  else
    return 127
  fi
}
#
remove_drivers()
{
   local DRIVERS  DRIVER #CONDITION
   DRIVERS="$1"
   if [ "$DRIVERS" = "" ]; then
     return 127
   fi
   eval DRIVER="\$$1"
   if [ `echo $DRIVER | /bin/busybox wc -w 2>/dev/null` -ge 1 ]; then
     DRIVERS="` echo $DRIVER | /bin/busybox tr "-" "_" 2>/dev/null`"
   else
     DRIVERS="` echo $DRIVERS | /bin/busybox tr "-" "_" 2>/dev/null`"
   fi
   DRIVER=""

   for DRIVER in $DRIVERS; do
     if [ "$INITDBG" != "" ]; then
       remove_kernelmodule_debug "$DRIVER"
     else
       remove_kernelmodule "$DRIVER"
     fi
   done
   /bin/busybox sync 2>/dev/null
}
#
probe_drivers()
{
   local DRIVERS  DRIVER #CONDITION

   DRIVERS="$1"
   if [ "$DRIVERS" = "" ]; then
     return 127
   fi
   eval DRIVER="\$$1"
   if [ `echo $DRIVER | /bin/busybox wc -w 2>/dev/null` -ge 1 ]; then
     DRIVERS="$DRIVER"
   fi
   DRIVERS="` echo $DRIVERS | /bin/busybox tr "-" "_" 2>/dev/null`"
   
    DRIVER=""
    if [ "$INITDBG" != "" ]; then
      for DRIVER in $DRIVERS; do
        probe_kernelmodule_debug "$DRIVER"
      done
    else
      for DRIVER in $DRIVERS; do
        probe_kernelmodule "$DRIVER"
      done
    fi

   /bin/busybox mdev -s  2>/dev/null
   /bin/busybox sync     2>/dev/null
}
#
probe_drivers_old()
{
   local DRIVERS  DRIVER #CONDITION

   DRIVERS="$1"
   if [ "$DRIVERS" = "" ]; then
     return 127
   fi
   eval DRIVER="\$$1"
   if [ `echo $DRIVER | /bin/busybox wc -w 2>/dev/null` -ge 1 ]; then
     DRIVERS="` echo $DRIVER | /bin/busybox tr "-" "_" 2>/dev/null`"
   else
     DRIVERS="` echo $DRIVERS | /bin/busybox tr "-" "_" 2>/dev/null`"
   fi
    DRIVER=""
    if [ "$INITDBG" != "" ]; then
      for DRIVER in $DRIVERS; do
        probe_kernelmodule_debug "$DRIVER"
      done
    else
      for DRIVER in $DRIVERS; do
        probe_kernelmodule "$DRIVER"
      done
    fi

   /bin/busybox mdev -s  2>/dev/null
   /bin/busybox sync     2>/dev/null
}
#
probe_early_kernelmodules()
{
  local DRIVER DRIVERS  
  if [ "$NOSFS" = "" ]; then
     echoconsole "$INITPREF" "Probing for early kernelmodules"
     DRIVERS="$DEFAULT_EARLYDRIVERS"
     EARLYDRIVERS="$EARLYDRIVERS $DRIVERS"
     export EARLYDRIVERS
     probe_drivers "EARLYDRIVERS"
  fi #noinput
  
}
#
probe_inputdevice_drivers()
{
  local DRIVER DRIVERS  INPUT MOUSEDEV KEYBOARDDEV OLDDRIVERS
  if [ "$NOINPUT" = "" ]; then
     echoconsole "$INITPREF" "Probing i8042/ISA/PS-2 Controller"
     DRIVERS="$DEFAULT_SHORTINPUTDRIVERS"
     INPUTDRIVERS="$INPUTDRIVERS $DRIVERS"
     export INPUTDRIVERS
     probe_drivers "INPUTDRIVERS"
  fi #noinput

  if [ "$NOTOUCH" = "" ]; then
    TOUCHDRIVERS="$DEFAULT_SYSINPUTDRIVERS $DEFAULT_TOUCHPADDRIVERS $DEFAULT_TABLETDRIVERS"
    export TOUCHDRIVERS
    probe_drivers "TOUCHDRIVERS"
  fi # notouch

}
#
probe_systembus_drivers()
{

   echoconsole "$INITPREF" "Probing Systembus-Controller"
   if [ "$DEFAULT_SYSBUSDRIVERS" != "" ]; then
     BUSDRIVERS="$DEFAULT_SYSBUSDRIVERS $DEFAULT_BUSDRIVERS"
     export BUSDRIVERS
     probe_drivers "BUSDRIVERS"
   else
     echoconsole "$INITPREF" "No system bus drivers found in configuration"
   fi
   probe_inputdevice_drivers
}
#
probe_atadevice_drivers()
{
  local  DRIVER DRIVERS
  if [ "$NOINT" = "" -o "$NOEXT" = "" ]; then
    echoconsole "$INITPREF" "Found: ATA/RAID Controller"
    echoconsole "$INITPREF" "Probing default modules for IDE/ATA/RAID Controller"
    probe_blockdevice_drivers
  else
    echoconsole "$INITPREF" "Not probing for any block devices"
  fi
}
#
probe_satadevice_drivers()
{
  local  DRIVER DRIVERS
  if [ "$NOINT" = "" ]; then
    echoconsole "$INITPREF" "Found: SATA/RAID Controller"
    echoconsole "$INITPREF" "Probing default modules for SATA/RAID Controller"
    DRIVERS="$DEFAULT_SYSSATADRIVERS"
    if [ "$NOHD" = "" -o "$NOCD" = "" ]; then
      DRIVERS="$DRIVERS $DEFAULT_SATADRIVERS"
    fi
    # needs to come up the devices on controller
    if [ "$NOCD" = "" ]; then
      DRIVERS="$DRIVERS sr_mod cdrom"
    fi
    if [ "$DEBUG" != "" ]; then
      DRIVERS="$DRIVERS scsi_debug"
    fi
    ATADRIVERS="$DRIVERS"
    probe_drivers "ATADRIVERS"
  fi
}
#
probe_serialusb_drivers()
{
  local  DRIVER DRIVERS
  if [ "$NOUSB" = "" ]; then
     echoconsole "$INITPREF" "Found: USB Controller"
     DRIVERS="$DEFAULT_USBDRIVERS"
     if [ "$NOEXT" = "" ]; then
       # if normal usb-storage on local USB-Port ...
       DRIVERS="$DRIVERS $DEFAULT_USBSTORDRIVERS"
       # ?need to come up the optical devices on controller
       if [ "$NOCD" = "" ]; then
          DRIVERS="$DRIVERS sr_mod cdrom"
       fi
     fi
     if [ "$NOINPUT" = "" ]; then
       DRIVERS="$DRIVERS $DEFAULT_USBINPUTDRIVERS"
     fi
     USBDRIVERS="$DEFAULT_SYSUSBDRIVERS $DRIVERS"
     echoconsole "$INITPREF" "Probing for USB-Devices"
     export USBDRIVERS
     probe_drivers "USBDRIVERS"
  fi #nousb
}
#
probe_firewire_drivers()
{

  if [ "$NOFW" = "" ]; then
     if [ "$NOEXT" = "" ]; then
      DRIVERS="$DEFAULT_FIREWIREDRIVERS"
      FIREWIREDRIVERS="$DRIVERS"
      export FIREWIREDRIVERS
      probe_drivers "FIREWIREDRIVERS"
     fi
  fi #nofw
  
}
#
probe_blockdevice_drivers()
{
  local  DRIVER DRIVERS
  if [ "$NOINT" = "" ]; then
    #  are there AHCI/ATA/SATA/RAID DISK controller?
    if [ "`/bin/busybox lspci -k 2>/dev/null | /bin/busybox grep "Class 01" 2>/dev/null`" != "" ]; then
       echoconsole "$INITPREF" "Found: AHCI/ATA/SATA/RAID Controller"
       DRIVERS="$ATADRIVERS"
       if [ "$DRIVERS" = "" ]; then
         #DRIVERS="$DEFAULT_ATADRIVERS"
         if [ "$NOSCSI" = "" ]; then
           DRIVERS="$DEFAULT_SYSATADRIVERS"
         fi
         if [ "$NOHD" = "" -o "$NOCD" = "" ]; then
           DRIVERS="$DRIVERS $DEFAULT_ATADRIVERS"
         fi
         # needs to come up the devices on controller
         if [ "$NOCD" = "" ]; then
           DRIVERS="$DRIVERS sr_mod cdrom"
         fi
         if [ "$DEBUG" != "" ] ; then 
           ATADRIVERS="$DRIVERS scsi_debug"
         else
           ATADRIVERS="$DRIVERS"
         fi
       fi
       echoconsole "$INITPREF" "now modprobing for AHCI/ATA/RAID/SATA......"
       MODULES2LOAD="$MODULES2LOAD $ATADRIVERS"
       export ATADRIVERS
       probe_drivers "ATADRIVERS"
    fi # Class 01
  fi #noint

  if [ "$NOEXT" = "" ]; then
  #  are there external devices on USB controller?
  if [ "$NOUSB" = "" ]; then

    if [ "`/bin/busybox lspci -k 2>/dev/null | /bin/busybox grep "Class 0c03" 2>/dev/null`" != "" ]; then
     echoconsole "$INITPREF" "Found: USB Controller"
     DRIVERS=""
     if [ "$NOEXT" = "" ]; then
       # if normal usb-storage on local USB-Port ...
       if [ "$USBSTORDRIVERS" != "" ]; then
         DRIVERS="$USBSTORDRIVERS"
       else
         DRIVERS="$USBSTOR_DRIVERS"
       fi
       if [ "$NONET" = "" ]; then
         # if usb-storage resides on wireless netdevice ...
         if [ "$USBNETDRIVERS" != "" ]; then
           DRIVERS="$DRIVERS $USBNETDRIVERS"
         else
           DRIVERS="$DRIVERS $DEFAULT_USBNETDRIVERS"
         fi
       fi
       # ?need to come up the optical devices on controller
       if [ "$NOCD" = "" ]; then
          DRIVERS="$DRIVERS sr_mod cdrom"
       fi
     fi
     USBSTORDRIVERS="$DRIVERS"
     echoconsole "$INITPREF" "Probing for external USB-Storage"
     #export USBDRIVERS
     MODULES2LOAD="$MODULES2LOAD $USBSTORDRIVERS"
     export USBSTORDRIVERS
     probe_drivers "USBSTORDRIVERS"

    fi # Class 0c03

  fi #nousb

  #  firewire port
  if [ "$NOFW" = "" ]; then
    # is there a firewire port ?
    if [ "`/bin/busybox lspci -k 2>/dev/null | /bin/busybox grep "Class 0c00" 2>/dev/null`" != "" ]; then
     if [ "$NOEXT" = "" ]; then
      if [ "$FIREWIREDRIVERS" != "" ]; then
        DRIVERS="$FIREWIREDRIVERS"
      else
        DRIVERS="$DEFAULT_FIREWIREDRIVERS"
      fi
      FIREWIREDRIVERS="$DRIVERS"
      MODULES2LOAD="$MODULES2LOAD $FIREWIREDRIVERS"
      export FIREWIREDRIVERS
      probe_drivers "FIREWIREDRIVERS"
     fi
    fi #class 0c00
  fi #nofw

  fi #noext

}
#
probe_networkdevice_drivers()
{
  local  DRIVER DRIVERS
  #  Network devices
  if [ "$NONET" = "" ]; then
     if [ "$NOETH" = "" ]; then
        DRIVERS=""
        NETDRIVERS="$DEFAULT_NETDRIVERS"
        echoconsole "$INITPREF" "Probing Ethernet Controller"
        export NETDRIVERS
        probe_drivers "NETDRIVERS"
     fi # noether
  fi
}
#
probe_wirelessnetwork_drivers()
{
 if [ "$NONET" = "" ]; then
   if [ "$NOWLAN" = "" ]; then
      if [ "$WLANDRIVERS" = "" ]; then
         WLANDRIVERS="$DEFAULT_SYSWLANDRIVERS $DEFAULT_WLANDRIVERS"
      else
         WLANDRIVERS="$DEFAULT_SYSWLANDRIVERS $WLANDRIVERS"
      fi
      echoconsole "$INITPREF" "Probing Ethernet Controller"
      export WLANDRIVERS
      probe_drivers "WLANDRIVERS"
   fi # nowlan
  fi # nonet
}
#
probe_vgagraphic_drivers()
{
  local  DRIVER D
  #  Monitor, Graphic Devices
  if [ "$NOMON" = "" ]; then
    echoconsole "$INITPREF" "Probing VGA/DVI/HDMI Video Controller"
    VIDEODRIVERS=""
    VGACARD="`/bin/busybox lspci 2>/dev/null| /bin/busybox grep "Class 0300" 2>/dev/null`"
    if `is_substring_of "8086" "$VGACARD"`; then
        VIDEODRIVERS="$VIDEODRIVERS $INTELVIDEODRIVERS"
    fi
    if `is_substring_of "1002" "$VGACARD"`; then
        VIDEODRIVERS="$VIDEODRIVERS $ATIVIDEODRIVERS"
    fi
    if `is_substring_of "10de" "$VGACARD"`; then
        VIDEODRIVERS="$VIDEODRIVERS $NVIDIAVIDEODRIVERS"
    fi
    if [ "$VIDEODRIVERS" = "" ]; then
       VIDEODRIVERS="$DEFAULT_VIDEODRIVERS"
    fi
    VIDEODRIVERS="$DEFAULT_SYSVIDEODRIVERS $VIDEODRIVERS"
    export VIDEODRIVERS
    probe_drivers "VIDEODRIVERS"
  fi
}
#
probe_legacygraphic_drivers()
{
  local  DRIVER D
  #  Monitor, Graphic Devices
  if [ "$NOMON" = "" ]; then
    if [ "`/bin/busybox lspci -k 2>/dev/null | /bin/busybox grep "Class 0001" 2>/dev/null`" != "" ]; then
       VIDEODRIVERS="$DEFAULT_LEGACYVIDEO"
    fi
    VIDEODRIVERS="$DEFAULT_SYSVIDEODRIVERS $VIDEODRIVERS"
    export VIDEODRIVERS
    probe_drivers "VIDEODRIVERS"
  fi
}
#
probe_smbus_drivers()
{
  local  DRIVER D
  probe_drivers "SMBUSDRIVERS"
}
#
probe_graphic_drivers()
{
  local  DRIVER D
  #  Monitor, Graphic Devices
  if [ "$NOMON" = "" ]; then

    # is  there Graphics controller?
    if [ "`/bin/busybox lspci -k 2>/dev/null | /bin/busybox grep "Class 03" 2>/dev/null`" != "" ]; then

      echoconsole "$INITPREF" "Probing Video Controller"
      DRIVER="`/bin/busybox lspci -k 2>/dev/null | /bin/busybox grep "Class 03" 2>/dev/null | /bin/busybox cut -f5 -d" " 2>/dev/null`"
      if [ "$DRIVER" != "" ]; then
       if [ "$VIDEODRIVERS" = ""  ]; then
         VIDEODRIVERS="$DEFAULT_SYSVIDEODRIVERS"
       fi
       for D in $DRIVER; do
         VIDEODRIVERS="$VIDEODRIVERS $D"
       done
      fi
      if [ "$VIDEODRIVERS" = "" ]; then
        VIDEODRIVERS="$DEFAULT_SYSVIDEODRIVERS"
      fi
      # devices 1002 ati/amd 10de nvidia 8086 intel
      if [ "`/bin/busybox lspci -k 2>/dev/null| /bin/busybox grep "Class 03" 2>/dev/null | /bin/busybox grep "8086" 2>/dev/null`" != "" ]; then
        VIDEODRIVERS="$VIDEODRIVERS $INTELVIDEODRIVERS"
      fi
      if [ "`/bin/busybox lspci -k 2>/dev/null| /bin/busybox grep "Class 03" 2>/dev/null | /bin/busybox grep "1002" 2>/dev/null`" != "" ]; then
        VIDEODRIVERS="$VIDEODRIVERS $ATIVIDEODRIVERS"
      fi
      if [ "`/bin/busybox lspci -k 2>/dev/null | /bin/busybox grep "Class 03" 2>/dev/null | /bin/busybox grep "10de" 2>/dev/null`" != "" ]; then
        VIDEODRIVERS="$VIDEODRIVERS $NVIDIAVIDEODRIVERS"
      fi

    fi # Driver in Class 03

    if [ "`/bin/busybox lspci -k 2>/dev/null | /bin/busybox grep "Class 0001" 2>/dev/null`" != "" ]; then
       VIDEODRIVERS="$VIDEODRIVERS $DEFAULT_LEGACYVIDEO"
    fi
    if [ "$VIDEODRIVERS" = "" ]; then
       VIDEODRIVERS="$DEFAULT_SYSVIDEODRIVERS $DEFAULT_VIDEODRIVERS"
    fi
    if [ "$NOUSB" = "" ]; then
      VIDEODRIVERS="$VIDEODRIVERS udl"
    fi
    export VIDEODRIVERS
    probe_drivers "VIDEODRIVERS"

  fi     #nomon
}
#
probe_sound_drivers()
{
  # Sound Devices ?
  if [ "$NOSND" = "" ]; then
       echoconsole "$INITPREF" "Sound Controller found..."
       if [ "$SOUNDDRIVERS" =  "" ]; then
         SOUNDDRIVERS="$DEFAULT_SOUNDDRIVERS"
       fi
       if [ "$NOUSB" = "" ]; then
         SOUNDDRIVERS="$SOUNDDRIVERS $DEFAULT_USBSOUNDDRIVERS"
       fi
       echoconsole "$INITPREF" "Probing Sound Controller"
       export SOUNDDRIVERS
       probe_drivers "SOUNDDRIVERS"
  fi # nosnd
}
#
find_filesystem_drivers()
{
    local  DRIVER DRIVERS BLKIDBB OLDFILEDRIVERS DEVICE TYPE
    BLKIDBB=""
    #  the filesystem drivers need to be loaded

    #/bin/busybox mdev -s 2>/dev/null
    #/bin/busybox sync    2>/dev/null

    DRIVERS=""
    if [ "$NOHD" = "" -o "$NOCD" = "" ]; then
      OLDFILEDRIVERS=""
      /bin/busybox mdev -s 2>/dev/null
      /bin/busybox sync    2>/dev/null
      BLKIDBB=`/bin/busybox blkid   2>/dev/null`
      if [ "$BLKIDBB" != "" ]; then
        for DRIVER in $FILEDRIVERS; do
          if `is_substring_of "\"$DRIVER\""  "$BLKIDBB" `; then
            DRIVERS="$DRIVERS $DRIVER"
          fi
        done
        # drivers needed to access accessible blockdevice
        export DRIVERS
        OLDFILEDRIVERS="$DRIVERS"
        /bin/busybox mdev -s 2>/dev/null
        /bin/busybox sync    2>/dev/null
        DRIVERS=""
        
        if [ "$DRIVERS" = "" ]; then
          BLKIDBB=`/bin/busybox blkid   2>/dev/null`
          DRIVERS="` echo $BLKIDBB | /bin/busybox tr " " "\n" 2>/dev/null| /bin/busybox grep TYPE 2>/dev/null | /bin/busybox cut -f2 -d= 2>/dev/null | /bin/busybox tr -d '\"' 2>/dev/null `"
        fi
        DRIVERS="$OLDFILEDRIVERS $DRIVERS"
        #echo "$INITPREF found drivers '$DRIVERS'"
      fi
      #for DRIVER in $FILEDRIVERS $DRIVERS; do
      #  if `is_substring_of  "$DRIVER"  "$BLKIDBB"`; then
       #   DRIVERS="$DRIVERS $DRIVER"
       # fi
      #done
      #export FILEDRIVERS
    fi
    if [ "$DEFAULT_SYSFILEDRIVERS" = "" ]; then
      inline_external_file "FILESYSTEM_MODULES"
      #FILEDRIVERS="$DEFAULT_SYSFILEDRIVERS"
    fi
    if [ "$NOHD" = "" -a "$DRIVERS" = "" ]; then
        FILEDRIVERS="$FILEDRIVERS $DEFAULT_FILEDRIVERS"
    fi
    if [ "$NOCD" = "" ]; then
        FILEDRIVERS="$FILEDRIVERS $DEFAULT_OPTICALDRIVERS"
    fi
    if [ "$NOLAYER" = "" ]; then
      FILEDRIVERS="$FILEDRIVERS $DEFAULT_LAYERFSDRIVERS"
    fi
    FILEDRIVERS="$DRIVERS $FILEDRIVERS $DEFAULT_SYSFILEDRIVERS"
    remove_duplicates_from_global_string "FILEDRIVERS"
  
    export FILEDRIVERS

}
#
probe_filesystem_drivers()
{
    echoconsole "$INITPREF" "Probing filesystem drivers"
    find_filesystem_drivers "$INITPREF"     
    probe_drivers "FILEDRIVERS"
}
#
probe_legacy_inputdevice_drivers()
{
  # legacy input devices? are there still not all input devices up?
  local INPUT MOUESEDEV KEYBOARDDEV COND1 COND2
  MOUSEDEV=""
  KEYBOARDDEV=""
  INPUT=""

  COND1="`/bin/busybox lspci -k 2>/dev/null | /bin/busybox grep "Class 09" 2>/dev/null`"
  COND2="`/bin/busybox lspci -k 2>/dev/null | /bin/busybox grep "Class 07" 2>/dev/null`"
  if [ "$COND1" != "" -o "$COND2" != "" ]; then
#    KEYBOARDDEV=`/bin/busybox cat  /proc/bus/input/devices 2>/dev/null | /bin/busybox grep "sysrq"  2>/dev/null`
#    [ "$KEYBOARDDEV" = "" ] &&   KEYBOARDDEV=`/bin/busybox grep "leds"   /proc/bus/input/devices 2>/dev/null `
#    [ "$KEYBOARDDEV" = "" ] &&   KEYBOARDDEV=`/bin/busybox grep "kbd"   /proc/bus/input/devices 2>/dev/null `

#    MOUSEDEV=`/bin/busybox cat  /proc/bus/input/devices 2>/dev/null | /bin/busybox grep "ouse"  2>/dev/null`
#    if [ "$MOUSEDEV" = "" -o "$KEYBOARDDEV" = "" ]; then
      INPUTDRIVERS="$DEFAULT_LEGACYINPUTDRIVERS"
      echoconsole "$INITPREF" "Probing more (legacy) INPUT devices"
      export INPUTDRIVERS
      probe_drivers "INPUTDRIVERS"
  else
      echoconsole "$INITPREF" "No legacy INPUT devices in pci bus found..."
  fi
  

}
#
modprobe_essential_drivers()
{

   probe_kernelmodule ff_memless
   probe_kernelmodule input_polldev
   probe_kernelmodule serio
   probe_kernelmodule mousedev
   probe_kernelmodule i8042
   probe_kernelmodule libps2
   #probe_kernelmodule evdev
   probe_kernelmodule psmouse
   probe_kernelmodule inport
   probe_kernelmodule logibm

   probe_kernelmodule atkbd
   probe_kernelmodule serio_raw

   probe_kernelmodule scsi_mod
   probe_kernelmodule scsi_debug
   probe_kernelmodule sd_mod
   probe_kernelmodule sr_mod
   probe_kernelmodule sg

   probe_kernelmodule  pci
   probe_kernelmodule  pcieport
   probe_kernelmodule  pci_hotplug
   
   probe_kernelmodule  ahci
   probe_kernelmodule  ata
   probe_kernelmodule  libata
   probe_kernelmodule  ahci
   probe_kernelmodule  ata_piix
   probe_kernelmodule  ata_generic
   probe_kernelmodule  ide_core
   probe_kernelmodule  ide_gd_mod
   probe_kernelmodule  ide_cd_mod
   probe_kernelmodule  ide_pnp
   probe_kernelmodule  ide_platform
   probe_kernelmodule  ide_pci_generic
   probe_kernelmodule  ide_generic
   probe_kernelmodule  cdrom

   probe_kernelmodule  rtc-core
   probe_kernelmodule  rtc-lib
   probe_kernelmodule  rtc-cmos


  if [ "$NOUSB" = "" ]; then

     probe_kernelmodule usb_common
     probe_kernelmodule usbhid
     probe_kernelmodule usb_hid
     probe_kernelmodule usbkbd
     probe_kernelmodule usbmouse

  #   The most simple and elegant way is to do it anyway
     probe_kernelmodule usbcore
     probe_kernelmodule whcicore

  # and leave the possibility to allocate usb-core dynmically
     probe_kernelmodule xhci_hcd
     probe_kernelmodule ehci_hcd
     probe_kernelmodule uhci_hcd
     probe_kernelmodule ohci_hcd
     probe_kernelmodule whci
     probe_kernelmodule whci_hcd

   # finally set up the disk storage drive
     probe_kernelmodule usb-storage

     probe_kernelmodule usb-libusual
     probe_kernelmodule ums-datafab
     probe_kernelmodule ums-freecom
     probe_kernelmodule ums-isd200
     probe_kernelmodule ums-usbat
     probe_kernelmodule ums-sddr09
     probe_kernelmodule ums-sddr55
     probe_kernelmodule ums-freecom
     probe_kernelmodule ums-jumpshot
     probe_kernelmodule ums-alauda
     probe_kernelmodule ums-onetouch
     probe_kernelmodule ums-karma
     probe_kernelmodule ums-cypress
  fi
  if [ "$NOFW" = "" ]; then
     probe_kernelmodule firewire-core

     probe_kernelmodule  firewire-net
     probe_kernelmodule  firewire-sbp2
     probe_kernelmodule  firewire-ohci

     probe_kernelmodule  ieee1394

     probe_kernelmodule  ohci1394
     probe_kernelmodule  ieee1394-sbp2
  fi
  if [  "$NOPCMCIA" = ""  ];then
     probe_kernelmodule pcmcia_core
     probe_kernelmodule pcmcia
     probe_kernelmodule rsrc_nonstatic
     probe_kernelmodule yenta_socket
  fi
  
  for DRIVER in $DEFAULT_SYSFILEDRIVERS $DEFAULT_FILEDRIVERS; do
    probe_kernelmodule "$DRIVER"
  done

  if [  "$NOMON" = ""  ];then
    for DRIVER in $DEFAULT_SYSVIDEODRIVERS $DEFAULT_VIDEODRIVERS; do
      probe_kernelmodule "$DRIVER"
    done
  fi
}
#
probe_standardpc_drivers()
{
  inline_external_file "SYSTEMBUS_MODULES"
  if [ "$DEFAULT_SYSBUSDRIVERS" != "" ]; then
    probe_drivers "DEFAULT_SYSBUSDRIVERS"
  fi
}
#
modprobe_prepci_drivers()
{
  modprobe_essential_drivers
}
#
probe_initially()
{
  # PCI CLASSES    lspci
  # 00=unclassified : 00-non-vga 01-vga
  # 01=mass storage controller : 00-scsi 01-ide 02-floppy 03-ipi 04-raid 05-ata 06-sata 07-SAS 08-nvram 80-mass-stor
  # 02=network : 00-ether 01-tr 02-fddi 03-atm 04-isdn 05-worldfip 06-picmg 80-network
  # 03=display : 00-vga 01-xga  02-3D 80-display
  # 04=multimedia : 00-video 01-audio 02-telephony 03-audiodevice 80-multimedia
  # 05=memory : 00-RAM 01-FLASH 80-mem
  # 06=bridges : 00-host 01-isa 02-eisa 03-microchannel 04-pci 05-pcmcia 06-nu 07-cardbus 08-racey 09-semitransparent pci-pci 0a-infiniband 80-bridge
  # 07=communication : 00-serial 01-parallel 02-multiport-serial 03-modem 04-gpib 05-smardcard 80-comm
  # 08=generic peripheral : 00-PIC 01-DMA 02-RTC 04-hotplug 05-SD 06-iommu 80-peripheral
  # 09=input device : 00-keybd 01-digitizer 02-mouse 03-scanner 04-gameport 80-input
  # 0a=docking station
  # 0b=processor
  # 0c=serial : 00-firewire 01-access 02-ssa 03-usb 04-fibrechannel 05-smbus 06-infiniband 07-ipmi-smic 08-sercos 09-canbus
  # 0d=wireless : 00-irda 01-cir 10-rfid 11-bluetooth 12-broadband 20-802.1a 21-802.1b 80-wireless
  # 0e=intelligent controller
  # 0f=satellite comm
  # 10=encryption : 00-netcomp 10-entertainment 80-encrypt
  # 11=signal comm
  # ff=unassigned
  # device manufacturer codes : 1022=amd 1002=ati/amd 10de=nvidia 8086=intel
  /bin/busybox mdev -s 2>/dev/null
  /bin/busybox sync 2>/dev/null

  if [ "`/bin/busybox lspci 2>/dev/null`" != "" ]; then

    echodebug "$INITPREF" "Found pci bus, probing busdrivers"
    debug_busdevices "$MSGFILE" "before loading busdrivers"
    probe_systembus_drivers

    echodebug "$INITPREF" "probing input device drivers, inhibit with nokbd and nomouse"
    debug_busdevices "$MSGFILE" "before loading inputdrivers"
    probe_inputdevice_drivers

    echodebug "$INITPREF" "probing video device drivers, inhibit with nomon"
    #debug_mark "probing video device drivers, inhibit with nomon"
    debug_busdevices "$MSGFILE" "before loading monitor drivers"
    probe_graphic_drivers

    echodebug "$INITPREF" "probing block device drivers, inhibit with nohd and nocd"
    debug_busdevices "$MSGFILE" "before loading blockdevice drivers"
    probe_blockdevice_drivers

    echodebug "$INITPREF" "probing legacy input device drivers"
    debug_busdevices "$MSGFILE" "before loading legacy input drivers"
    probe_legacy_inputdevice_drivers

    echodebug "$INITPREF" "probing filesystem drivers, inhibit with nohd and nocd"
    debug_busdevices "$MSGFILE" "before loading filesys drivers"
    probe_filesystem_drivers

    debug_mark "probing network device drivers, inhibit with nonet"
    debug_busdevices "$MSGFILE" "before loading net drivers"
    probe_networkdevice_drivers

    debug_mark "probing sound device drivers, inhibit with nosnd"
    debug_busdevices "$MSGFILE" "before loading sound drivers"
    probe_sound_drivers
  else
    echodebug "$INITPREF" "No pci bus found , probing essential drivers"
    debug_busdevices "$MSGFILE" "before loading essential drivers"
    modprobe_prepci_drivers
  fi

  /bin/busybox sync 2>/dev/null
  debug_busdevices "$MSGFILE" "after loading all drivers initially"
}
#
find_drivers_from_uevents()
{
  local DRIVERS DRV MODULES DRIVER MOD
  [ "$INITPREF" ] || INITPREF="[ $0/- ]:"
  [ "$MSGFILE" ] || MSGFILE="initmsg"
  DRIVERS="`/bin/busybox find /sys -name "uevent" -exec cat '{}' \; 2>/dev/null | /bin/busybox grep DRIVER 2>/dev/null | /bin/busybox cut -f2- -d= 2>/dev/null | /bin/busybox tr "\n" " " 2>/dev/null ` "
  echodebug "$INITPREF" "Found drivers from from uevents: '$DRIVERS'"
  MODULES=""
  # filter duplicate names
  for DRV in $DRIVERS; do
    if `is_not_substring_of "$DRV " " $MODULES "`; then 
      MODULES="$MODULES $DRV "
    fi
  done
  echodebug "$INITPREF" "Found modules from uevents: '$MODULES'"
  MODULES="`echo $MODULES $MODULES2LOAD | /bin/busybox tr "-" "_" 2>/dev/null` "
  # resolve dependencies
  for DRV in $MODULES; do
    DRIVER=""
    DRIVER="`/bin/busybox modprobe -D "$DRV" 2>/dev/null | /bin/busybox cut -f2- -d " " 2>/dev/null | /bin/busybox tr  "-" "_" 2>/dev/null | /bin/busybox tr  "\n" " " 2>/dev/null` "
    if [ "$DRIVER" != "" ]; then
      # integrate multiple drivers' dependencies and avoid all duplicates
      for D in $DRIVER; do
        D="`/bin/busybox basename "$D" 2>/dev/null`"
        D=${D//.ko*}
        if  `is_not_substring_of  "$D " " $MODULES " `; then
           echodebug "$INITPREF"  "adding module '$D'"
           MODULES="$MODULES $D "
        fi
      done
    fi
    MOD=""
    # replaced by a more generic modalias recognition version
    # the case list is incomplete!
    case $DRV in
         sd)
           if [ "$NOCD" = "" ]; then
             MOD="sr_mod"
           fi
           MOD="scsi_mod scsi_dev sd_mod sg"
         ;;
         system)
           MOD="$DEFAULT_SYSBUSDRIVERS"         
         ;;
         SP5100)
           MOD="sp5100_tco"         
         ;;
         reg-dummy)
           MOD="regulator"         
         ;;
         kbd)
           MOD="atkbd i8042 serio libps2"
         ;;
         usbhid)
           MOD="usbhid usbkbd usbmouse"
         ;;
         *piix*)
           MOD="ata_piix piix4_smbus"         
         ;;
         *smbus*)
           MOD="i2c_smbus"         
         ;;
         hub|usb)
           MOD="$DEFAULT_SYSUSBDRIVERS $DEFAULT_USBDRIVERS"
         ;;
         pcieport)
           MOD="$DEFAULT_SYSBUSDRIVERS"         
         ;;
         ec)
           MOD="ec_sys"
         ;;
         slots=*)
           MOD="`echo ${DRV#slots=} | /bin/busybox tr "," " " 2>/dev/null`"
         ;;
    esac
    echodebug  "$INITPREF" "Found : '$DRV'"
    echodebug  "$INITPREF" "Replaced with : '$MOD'"
    MODULES=" $MOD $MODULES "

  done
  # do another run to refine
  MODULES2LOAD="$MODULES"
  MODULES=""
  for DRV in $MODULES2LOAD; do
    DRIVER="`/bin/busybox modprobe -D "$DRV" 2>/dev/null | /bin/busybox cut -f2- -d " " 2>/dev/null | /bin/busybox tr  "-" "_" 2>/dev/null | /bin/busybox tr  "\n" " " 2>/dev/null`"
    if [ "$DRIVER" != "" ]; then
      # integrate multiple drivers' dependencies and avoid all duplicates
      for D in $DRIVER; do
        D="`/bin/busybox basename "$D" 2>/dev/null`"
        D=${D//.ko*}
        if  `is_not_substring_of  "$D " " $MODULES " `; then
           #echo "adding module '$D'"
           MODULES="$MODULES $D "
        fi
      done
    else
      echodebug "$INITPREF" "Driver '$DRV' not found with modprobe in kernel modules" 
    fi
  done
  MODULES2LOAD="$MODULES2LOAD $MODULES "
  echodebug "$INITPREF" "Found modules with modprobe -D from modules.dep: '$MODULES'"
  echodebug "$INITPREF" "Found modules to load: '$MODULES2LOAD'"

}
#
remove_already_loaded_modules()
{

  local STRINGVAR STRING DRV
  if [ "$1" != "" ]; then
    eval STRINGVAR="\$$1"
    STRING=""
    for DRV in $STRINGVAR; do
      if `is_not_string_in_file  "$DRV " "/proc/modules"`; then 
        STRING="$STRING $DRV"
      fi
    done
    if [ "$STRING" != "" ]; then
      STRINGVAR="$1=\"$STRING\""
      eval "$STRINGVAR"
    fi
    return $?
  else
    return 127
  fi
}
#
set_blacklisted_modules()
{
  if [ "$BLACKLIST_MODULES" = "" ]; then
    inline_external_file  "BLACKLIST_MODULES"
  fi
  local BLACKATALL NOBLOCKDEV NONETDEV NOINDEV 
  NOBLOCKDEV="$NOIDE$NOHD$NOSATA$NOATA$NOCARDMEM$NOEXT$NOINT"
  NONETDEV="$NONET$NOETH$NOWLAN$NOUSBNET"
  NOINDEV="$NOINPUT$NOMUSE$NOKBD$NOHID$NOTOUCH$NOTABLET"
  BLACKATALL="$NONET$NOSND$NOMON$NOINDEV$NOUSB$NOPCMCIA$NOFW$NOBLOCKDEV$NOSERIAL$NOBT"
  
  if [ "$BLACKATALL" != "" ]; then
    
    # all or some net devices unwanted
    if [ "$NONETDEV" != "" ]; then
      inline_external_file "NETDEVICE_MODULES"
      if [ "$NONET" != "" ]; then
        NONET="nonet"
        NOETH="noeth"
        NOWLAN="nowlan"
        NOUSBNET="nousbnet"
        BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_SYSNETDRIVERS $DEFAULT_NETDRIVERS $DEFAULT_SYSWLANDRIVERS $DEFAULT_WLANDRIVERS $DEFAULT_USBNETDRIVERS"
        DEFAULT_SYSNETDRIVERS="" 
        DEFAULT_NETDRIVERS="" 
        DEFAULT_SYSWLANDRIVERS="" 
        DEFAULT_WLANDRIVERS="" 
        DEFAULT_USBNETDRIVERS=""
      else
        if [ "$NOWLAN" != "" ]; then
          BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_SYSWLANDRIVERS $DEFAULT_WLANDRIVERS "
          DEFAULT_SYSWLANDRIVERS="" 
          DEFAULT_WLANDRIVERS=""
        fi
        if [ "$NOETH" != "" ]; then
          BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_SYSNETDRIVERS $DEFAULT_NETDRIVERS "
          DEFAULT_SYSNETDRIVERS=""
          DEFAULT_NETDRIVERS=""
        fi
        if [ "$NOUSBNET" != "" ]; then
          BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_SYSNETDRIVERS $DEFAULT_USBNETDRIVERS "
          DEFAULT_SYSNETDRIVERS=""
          DEFAULT_USBNETDRIVERS=""
        fi
      fi
    fi
    
    if [ "$NOMON" != "" ]; then
      inline_external_file "VIDEODEVICE_MODULES"
      BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_SYSVIDEODRIVERS $DEFAULT_VIDEODRIVERS "
      DEFAULT_SYSVIDEODRIVERS="" 
      DEFAULT_VIDEODRIVERS=""
    fi
    
    if [ "$NOSND" != "" ]; then
      inline_external_file "MULTIMEDIADEVICE_MODULES"
      BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_SOUNDDRIVERS "
      DEFAULT_SOUNDDRIVERS=""
    fi
    if [ "$NOSERIAL" != "" ]; then
      inline_external_file "SERIALTTY_MODULES"
      BLACKLIST_MODULES="$BLACKLIST_MODULES $ALL_SERIALTTY_DRIVERS "
      DEFAULT_SERIALTTY_DRIVERS=""
    fi
    
    if [ "$NOINDEV" != "" ]; then 
       
      inline_external_file "INPUTDEVICE_MODULES"
      if [ "$NOINPUT" != "" ]; then
        BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_INPUTMODULES "
        DEFAULT_INPUTMODULES=""
      fi
      if [ "$NOHID" != "" ]; then
        BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_HIDDRIVERS "
        DEFAULT_HIDDRIVERS=""
      fi
      if [ "$NOUSBINPUT" != "" ]; then
        BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_USBINPUTDRIVERS "
        DEFAULT_USBINPUTDRIVERS=""
      fi
      if [ "$NOTOUCH" != "" ]; then
        BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_INPUTMODULES "
        DEFAULT_INPUTMODULES=""
      fi      
      if [ "$NOTABLET" != "" ]; then
        BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_INPUTMODULES "
        DEFAULT_INPUTMODULES=""
      fi
      if [ "$NOMOUSE" != "" ]; then
        BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_MOUSEDRIVERS "
        DEFAULT_MOUSEDRIVERS=""
      fi
      if [ "$NOKBD" != "" ]; then
        BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_KEYBOARDDRIVERS "
        DEFAULT_KEYBOARDDRIVERS=""
      fi
    fi
    
    if [ "$NOBLOCKDEV" != "" ]; then
      inline_external_file "BLOCKDEVICE_MODULES"
      if [ "$NOHD" != "" ]; then
        NOINT=noint
        NOEXT=noext
      fi
      if [ "$NOEXT" != "" ]; then
        BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_USBSTORDRIVERS $DEFAULT_FWSTORDRIVERS $DEFAULT_CARDMEMDRIVERS "
        DEFAULT_USBSTORDRIVERS="" 
        DEFAULT_FWSTORDRIVERS="" 
        DEFAULT_CARDMEMDRIVERS=""
      fi
      if [ "$NOINT" != "" ]; then
        BLACKLIST_MODULES="$BLACKLIST_MODULES $ALL_BLOCKDEVICEDRIVERS"
        ALL_BLOCKDEVICEDRIVERS=""
      fi
      if [ "$NOSATA" != "" ]; then
        BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_SYSSATADRIVERS $DEFAULT_SATADRIVERS "
        DEFAULT_SYSSATADRIVERS="" 
        DEFAULT_SATADRIVERS=""
      fi
      if [ "$NOATA" != "" ]; then
        BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_SYSATADRIVERS $DEFAULT_ATADRIVERS "
        DEFAULT_SYSATADRIVERS="" 
        DEFAULT_ATADRIVERS=""      
      fi
      if [ "$NOIDE" != "" ]; then
        BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_IDEDRIVERS"
        DEFAULT_IDEDRIVERS=""
      fi
    fi
    
    if [ "$NOUSB" != "" ]; then
      inline_external_file "USBBUS_MODULES"
      BLACKLIST_MODULES="$BLACKLIST_MODULES $ALL_USBDRIVERS "
      ALL_USBDRIVERS=""
    fi
    
    if [ "$NOPCMCIA" != "" ]; then
      inline_external_file "CARDBUS_MODULES"
      BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_CARDBUSMODULES "
      DEFAULT_CARDBUSMODULES=""
    fi
    
    if [ "$NOFW" != "" ]; then
      inline_external_file "FIREWIRE_MODULES"
      BLACKLIST_MODULES="$BLACKLIST_MODULES $DEFAULT_FIREWIREDRIVERS "
      DEFAULT_FIREWIREDRIVERS=""
    fi
    if [ "$NOBT" != "" ]; then
      inline_external_file "BLUETOOTH_MODULES"
      BLACKLIST_MODULES="$BLACKLIST_MODULES $ALL_BTDRIVERS "
      DEFAULT_FIREWIREDRIVERS=""
    fi
    
    remove_duplicates_from_global_string  "BLACKLIST_MODULES"
    echo "BLACKLIST_MODULES=\" $BLACKLIST_MODULES \"" > BLACKLIST_MODULES
  
  fi
  export BLACKLIST_MODULES
}
#
set_initial_modules()
{
   local MODULES1 MODULES2
   MODULES1=""
   if `is_substring_of "ahci" "$MODULES2LOAD"`; then
     MODULES1="ahci libahci ata_piix libata"
   fi
   # put the *hci_hcd's back to the right and universal order 
   MODULES2=""
   if `is_substring_of "hci_" "$MODULES2LOAD"` || `is_substring_of "hci-" "$MODULES2LOAD"` ; then
      MODULES2="ehci_pci ehci_hcd ehci_platform"
      if `is_substring_of "ohci" "$MODULES2LOAD "` ; then
        MODULES2="$MODULES2 ohci_pci ohci_hcd ohci_platform"
      fi
      if `is_substring_of "uhci" "$MODULES2LOAD "` ; then
        MODULES2="$MODULES2 uhci_hcd"
      fi
      MODULES2="$MODULES2 xhci_pci xhci_hcd"
   fi
   MODULES2LOAD="$MODULES1 $MODULES2 $MODULES2LOAD"
   if [ "$NOINPUT" = "" ]; then    
     if [ -e /proc/bus/input/devices ]; then
       if [ "$NOKBD" = "" ]; then
	 if  `is_not_string_in_file  "eyboard" "/proc/bus/input/devices"` && \
	     `is_not_string_in_file  "kbd*leds" "/proc/bus/input/devices"` && \
	     `is_not_string_in_file  "sysrq*kbd" "/proc/bus/input/devices"` ; then
	     MODULES2LOAD="$MODULES2LOAD atkbd usbkbd usbhid hid_generic"
	 fi
       fi
       if [ "$NOMOUSE" = "" ]; then
         if  `is_not_string_in_file  "ouse" "/proc/bus/input/devices"` ; then
           MODULES2LOAD="$MODULES2LOAD psmouse usbmouse usbhid hid_generic mousedev"
	 fi
       fi  
     else
       MODULES2LOAD="$MODULES2LOAD atkbd psmouse usbkbd usbmouse usbhid hid_generic mousedev"
     fi
     if [ "$NOBT" = "" ]; then    
       MODULES1=""
       if [ -e /proc/bus/input/devices ]; then
	 if [ "$NOKBD" = "" ] || [ "$NOMOUSE" = "" ]; then
	   if  `is_not_string_in_file  "eyboard" "/proc/bus/input/devices"` && \
	       `is_not_string_in_file  "kbd*leds" "/proc/bus/input/devices"` && \
	       `is_not_string_in_file  "sysrq*kbd" "/proc/bus/input/devices"` || \
	       `is_not_string_in_file  "ouse" "/proc/bus/input/devices"`  ; then
	       MODULES1="ath3k rfcomm bnep btusb bcm203x bpa10x bfusb st_drv bluetooth"
	   fi  
	 fi
       else
         MODULES1="ath3k rfcomm bnep btusb bcm203x bpa10x bfusb st_drv bluetooth"
       fi
       MODULES2LOAD="$MODULES1 $MODULES2LOAD "
     fi
   fi
   if [ "$NOHD" = "" ]; then
     MODULES2LOAD="$MODULES2LOAD brd loop scsi_mod sd_mod sg"
     if [ "$DEBUG" != "" ]; then MODULES2LOAD="$MODULES2LOAD scsi_debug "; fi
   fi
}
#
set_principal_modules()
{
   local mod al MODULE1 MODULES2
   MODULE1=""
   mod=""
   al=""
   if [ "$DEFAULT_MODALIASES" = "" ]; then
      DEFAULT_MODALIASES="Fix=mdio MDIO=mdio MDIO=mdio_gpio SP5100=sp5100_tco sd=scsi_mod sd=sd_mod sd=sg sd=loop sd=brd reg-dummy=mtr piix4_smbus=i2c_piix4 piix4_smbus=ahci piix4_smbus=ata_piix  piix4_smbus=i2c_smbus system=rtc_cmos ec=ec_sys serial8250=8250 serial8250=serial_core pcieport=ahci pcieport=ata_piix pcieport=wmi nouveau=fbcon "
   fi
   for mod in $MODULES2LOAD; do
     for al in $DEFAULT_MODALIASES; do
     case "$al" in
       $mod=*)
         MODULE1=${al#*=}
         if `is_not_substring_of "$MODULE1 " " $MODULES2LOAD " `; then 
           MODULES2LOAD="$MODULES2LOAD $MODULE1 "
         fi
       ;;
     esac
     done
   done
}
#
evaluate_aliases()
{
  # it turned out to be not necessary to evaluate all aliases
  # for probing with `busybox modprobe -D $modalias `
  # busybox modalias picks up from modules.alias file generated by busybox depmod
  local  DRIVER ALIASES MODALIASFILE MODULES RC
  if [ -e modules.alias ]; then
    MODALIASFILE="modules.alias"
  else
    if [ -e /lib/modules/$KERNVER/modules.alias ]; then
      MODALIASFILE="/lib/modules/$KERNVER/modules.alias"
    else 
      return 127
    fi
  fi
  export MODALIASFILE
  echodebug  "$INITPREF" "modaliasfile                : '$MODALIASFILE'"
  echodebug "$INITPREF" "evaluating all aliases from : '$MODALIASFILE'"
  /bin/busybox cat "$MODALIASFILE" 2>/dev/null | while read pref name value; do
    #echo " aliasing: '$aliasable'"
    eval "$pref $value=$name" 2>/dev/null
    RC=$?
    if [ $RC -ne 0 ]; then
      echodebug "$INITPREF" "failed to evaluate alias '$pref $value=$name' with '$RC'  "
    #else
    #  echofile "$INITPREF" "evaluated alias '$pref $value=$name' with '$RC'  "
    fi 
  done
}
#
find_drivers_with_aliases_fast()
{
  # this is a modified and enhanced version of the algorithm from android-x86 4.4 RC1
  # but it does not find in all cases
  local MODALIASFILE 
  if [ -e /lib/modules/$KERNVER/modules.alias ]; then
    MODALIASFILE="/lib/modules/$KERNVER/modules.alias"
  else 
    if [ -e modules.alias ]; then
      MODALIASFILE="modules.alias"
    else
      return 127
    fi
  fi
  
  local DRIVERS DRIVER ALIASES MODULES
  if [ -e bbmodp.sh ]; then
    echodebug "$INITPREF" "file bbmodp.sh already created! reusing..."
  else
    echo 'dev2mod() { while read dev rest; do case $dev in' > bbmodp.sh
    /bin/busybox sort -r  $MODALIASFILE | \
    /bin/busybox sed -n 's/^alias  *\([^ ]*\)  *\(.*\)/\1) \/bin\/busybox modprobe -D \2 2\>\/dev\/null;;/p' >> bbmodp.sh
    echo 'esac; done; }' >> bbmodp.sh
  fi
  . bbmodp.sh
  MODULES="$MODULES2LOAD"
  # which is faster? more universal? this: 
	#DRIVERS=`/bin/busybox cat /sys/bus/*/devices/*/modalias | dev2mod | /bin/busybox cut -f2- -d " " 2>/dev/null | /bin/busybox tr  "-" "_" 2>/dev/null | /bin/busybox tr  "\n" " " 2>/dev/null`
	#DRIVERS="$DRIVERS `/bin/busybox cat /sys/devices/virtual/wmi/*/modalias | dev2mod | /bin/busybox cut -f2- -d " " 2>/dev/null | /bin/busybox tr  "-" "_" 2>/dev/null | /bin/busybox tr  "\n" " " 2>/dev/null`"
  # or this?
  DRIVERS=`/bin/busybox find /sys -name modalias -exec cat '{}' \; 2>/dev/null| dev2mod | /bin/busybox cut -f2- -d " " 2>/dev/null | /bin/busybox tr  "-" "_" 2>/dev/null | /bin/busybox tr  "\n" " " 2>/dev/null`
  # both require an ordered module loading, but the last is 
  # the complete and appropriate solution for 
  # kernel .config's near 'make allmodconfig' 
  for D in $DRIVERS; do
      D="`/bin/busybox basename "$D" 2>/dev/null`"
      D=${D//.ko*}
      if  `is_not_substring_of  "$D " " $MODULES " `; then
        #echo "adding module '$D'"
        MODULES="$MODULES $D "
        # does not keep the proper order!
        #if [ "$DEBUG" != "" ]; then
        #  probe_kernelmodule_debug "$D"
        #else
        #  probe_kernelmodule "$D"
        #fi
      fi
  done
  MODULES2LOAD="$MODULES"
  export MODULES2LOAD
  echodebug  "$INITPREF" "modules-finally: '$MODULES2LOAD'"
}
#
find_drivers_refine()
{
  local MODULES DRIVERS D
  if [ "$MODULES2LOAD" != "" ]; then
    MODULES=""
    for D in $MODULES2LOAD; do
      DRIVERS="`/bin/busybox modprobe -D "$D" 2>/dev/null  | /bin/busybox cut -f2- -d " " 2>/dev/null | /bin/busybox tr  "-" "_" 2>/dev/null | /bin/busybox tr  "\n" " " 2>/dev/null`"
      for DRIVER in $DRIVERS; do
        DRIVER="`/bin/busybox basename "$DRIVER" 2>/dev/null`"
        DRIVER=${DRIVER//.ko*}
        if `is_not_substring_of "$DRIVER " " $MODULES2LOAD "`; then
          MODULES="$MODULES $DRIVER "
        fi
      done
    done
    if [ "$MODULES" != "" ]; then
      MODULES2LOAD="$MODULES2LAOD $MODULES"
      export MOODULES2LOAD
      echodebug  "$INITPREF" "modules-finally: '$MODULES2LOAD'"
    else
      echodebug "$INITPREF" "No more modules found with refining search!"
    fi
  fi
}
#
find_drivers_with_bbmodprobe()
{
  local  DRIVER ALIASES MODALIASFILE MODULES SEARCHDIR

  MODULES="$MODULES2LOAD"
  SEARCHDIR="$1"
  #MODALIASES="`/bin/busybox find "$SEARCHDIR"  -name "modalias" -exec cat '{}' \; 2>/dev/null`"
  # PCI CLASSES    lspci
  # 00=unclassified : 00-non-vga 01-vga
  # 01=mass storage controller : 00-scsi 01-ide 02-floppy 03-ipi 04-raid 05-ata 06-sata 07-SAS 08-nvram 80-mass-stor
  # 02=network : 00-ether 01-tr 02-fddi 03-atm 04-isdn 05-worldfip 06-picmg 80-network
  # 03=display : 00-vga 01-xga  02-3D 80-display
  # 04=multimedia : 00-video 01-audio 02-telephony 03-audiodevice 80-multimedia
  # 05=memory : 00-RAM 01-FLASH 80-mem
  # 06=bridges : 00-host 01-isa 02-eisa 03-microchannel 04-pci 05-pcmcia 06-nu 07-cardbus 08-racey 09-semitransparent pci-pci 0a-infiniband 80-bridge
  # 07=communication : 00-serial 01-parallel 02-multiport-serial 03-modem 04-gpib 05-smardcard 80-comm
  # 08=generic peripheral : 00-PIC 01-DMA 02-RTC 04-hotplug 05-SD 06-iommu 80-peripheral
  # 09=input device : 00-keybd 01-digitizer 02-mouse 03-scanner 04-gameport 80-input
  # 0a=docking station
  # 0b=processor
  # 0c=serial : 00-firewire 01-access 02-ssa 03-usb 04-fibrechannel 05-smbus 06-infiniband 07-ipmi-smic 08-sercos 09-canbus
  # 0d=wireless : 00-irda 01-cir 10-rfid 11-bluetooth 12-broadband 20-802.1a 21-802.1b 80-wireless
  # 0e=intelligent controller
  # 0f=satellite comm
  # 10=encryption : 00-netcomp 10-entertainment 80-encrypt
  # 11=signal comm
  # ff=unassigned
  # device manufacturer codes : 1022=amd 1002=ati/amd 10de=nvidia 8086=intel

  echodebug  "$INITPREF" "search directory top path: '$SEARCHDIR'"
  for modalias in `/bin/busybox find "$SEARCHDIR"  -name "modalias" -exec cat '{}' 2>/dev/null \; `; do
    DRIVER="`/bin/busybox modprobe -D "$modalias" 2>/dev/null | /bin/busybox cut -f2- -d " " 2>/dev/null | /bin/busybox tr  "-" "_" 2>/dev/null | /bin/busybox tr  "\n" " " 2>/dev/null`"
    # integrate multiple drivers;  duplicates will be removed later at once (faster!)
    for D in $DRIVER; do
      D="`/bin/busybox basename "$D" 2>/dev/null`"
      D=${D//.ko*}
      #if  `is_not_substring_of  "$D " "$MODULES" `; then
        #echo "adding module '$D'"
        MODULES="$MODULES $D "
      #fi
    done
  done
  # add dpendent modules to the discovered ones from modaliases

  MODULES2LOAD="$MODULES"
  export MODULES2LOAD
  
}
#
find_drivers_with_aliases()
{
  local MODALIASFILE 
  if [ -e modules.alias ]; then
    MODALIASFILE="modules.alias"
  else
    if [ -e /lib/modules/$KERNVER/modules.alias ]; then
      MODALIASFILE="/lib/modules/$KERNVER/modules.alias"
    else 
      return 127
    fi
  fi
  if [ "$1" != "" ]; then
    DIR="$1"
  else
    DIR="/sys"
  fi
  find_drivers_with_bbmodprobe "$DIR" "$MODALIASFILE"
  echodebug  "$1" "modules detected with aliases: '$MODULES2LOAD'"
  return 0
} 
#
kernelmodules_order()
{
  local mod MODULES OMITMODS
  if [ "$MODULES_ORDER" = "" ]; then
    inline_external_file "MODULES_ORDER"
  fi
  MODULES=""
  for mod in $MODULES_ORDER; do
    #mod=`echo $mod | /bin/busybox tr "-" "_" 2>/dev/null`
    if `is_substring_of  " $mod " " $MODULES2LOAD "` ; then
      MODULES="$MODULES $mod "
    fi 
  done
  OMITMODS=""
  for mod in $MODULES2LOAD; do
     if `is_not_substring_of "$mod " " $MODULES "`; then
       OMITMODS="$OMITMODS $mod "
     fi
  done  
  MODULES2LOAD="$MODULES $OMITMODS "
  export MODULES2LOAD
}
#
kernelmodules_autoload()
{
  local mod
  # we absolutely need here global string variables:
  # MODULES_ORDER   : all system variables in the order to load correctly
  # MODULES2LOAD    : all modules recognized from lspci/modalias/uevent to load for local machine 
  #find_drivers_from_uevents
  #find_drivers_from_modaliases
  #echoconsole "final modules: $MODULES2LOAD"
  [ "$MODULES_ORDER" ] ||  inline_external_file "MODULES_ORDER"
  [ "$BLACKLIST_MODULES" ] || inline_external_file "BLACKLIST_MODULES"
  export BLACKLIST_MODULES
  #inline_external_file WHITELIST_MODULES
  #MODULES2LOAD=" `echo $MODULES2LOAD | /bin/busybox tr "-" "_" 2>/dev/null` "  
  for mod in $MODULES_ORDER; do
    mod=`echo $mod | /bin/busybox tr "-" "_" 2>/dev/null`
    if `is_substring_of  " $mod " " $MODULES2LOAD "` ; then
      if [ "$INITDBG" != "" ]; then
        probe_kernelmodule_debug "$mod"
        #/bin/busybox mdev -s 2>/dev/null
        #/bin/busybox sync 2>/dev/null
      else
        probe_kernelmodule "$mod"
        #/bin/busybox mdev -s 2>/dev/null
        #/bin/busybox sync 2>/dev/null
      fi
    fi 
  done  
  /bin/busybox mdev -s 2>/dev/null
  /bin/busybox sync 2>/dev/null
}
#
kernelmodules_load()
{
  local mod
  # we absolutely need here global string variables:
  # MODULES2LOAD : all modules recognized and ordered from lspci/modalias to load for local machine 
  for mod in $MODULES2LOAD; do
      if [ "$INITDBG" != "" ]; then
        probe_kernelmodule_debug "$mod"
      else
        probe_kernelmodule "$mod"
      fi
  done  
  /bin/busybox mdev -s 2>/dev/null
  /bin/busybox sync 2>/dev/null
}
#
probe_scsidisk_drivers()
{
  if [ "$NOSCSI" = "" ]; then
    echoconsole "$INITPREF" "scidisk drivers:  TODO !"
  fi  
}
#  
probe_default_pcidrivers()
{
    local PCICLASSES NOPROBEDDRIVERS
    # keep the blanks at the beginning and end!
    PCICLASSES=" `/bin/busybox lspci 2>/dev/null | /bin/busybox cut -f3 -d" " 2>/dev/null | /bin/busybox cut -f1 -d":" 2>/dev/null | /bin/busybox tr "\n" " " 2>/dev/null` "
    
    if [ "$PCICLASSES" != "" ]; then

     if `is_substring_of " 06" " $PCICLASSES"`; then
         inline_external_file "INPUTDEVICE_MODULES"
         inline_external_file "SYSTEMBUS_MODULES"
         probe_systembus_drivers 
     fi
     if `is_substring_of "0804" "$PCICLASSES"`; then
         inline_external_file "INPUTDEVICE_MODULES"
         inline_external_file "SYSTEMBUS_MODULES"
         probe_systembus_drivers 
     fi
     if `is_substring_of " 09" " $PCICLASSES"`; then
         inline_external_file "INPUTDEVICE_MODULES"
         probe_legacy_inputdevice_drivers
     fi
     if `is_substring_of "0c05" "$PCICLASSES"`; then
         inline_external_file "INPUTDEVICE_MODULES"
         probe_legacy_inputdevice_drivers
     fi
     if `is_substring_of " 00" " $PCICLASSES"`; then
        inline_external_file "INPUTDEVICE_MODULES"
        probe_legacy_inputdevice_drivers
     fi
     
     if `is_substring_of " 01" " $PCICLASSES"`; then
       
       NOPROBEDDRIVERS=yes
       inline_external_file "BLOCKDEVICE_MODULES"
       
       if `is_substring_of "0106" "$PCICLASSES"`; then
            probe_satadevice_drivers
            NOPROBEDDRIVERS=""
       fi
       if `is_substring_of "0105" "$PCICLASSES"`; then
            probe_atadevice_drivers
            NOPROBEDDRIVERS=""
       fi
       if `is_substring_of "0100" "$PCICLASSES"`; then
            probe_scsidisk_drivers
            NOPROBEDDRIVERS=""
       fi
       # only probe them all if no special PCI bus recognized
       if [ "$NOPROBEDDRIVERS" != "" ]; then
            probe_blockdevice_drivers
            NOPROBEDDRIVERS=""
       fi
       
     fi

     if `is_substring_of "0c03" "$PCICLASSES"`; then
          inline_external_file "USBBUS_MODULES"
          probe_serialusb_drivers 
     fi
          

     if `is_substring_of " 03" " $PCICLASSES"`; then
       inline_external_file "VIDEODEVICE_MODULES"       
       if `is_substring_of "0300" "$PCICLASSES"`; then
          probe_vgagraphic_drivers
       else
          probe_graphic_drivers 
       fi
     fi

     if `is_substring_of " 0001" " $PCICLASSES"`; then
          inline_external_file "VIDEODEVICE_MODULES"       
          probe_graphic_drivers 
     fi
     

     if `is_substring_of " 04" " $PCICLASSES"`; then
        inline_external_file "MULTIMEDIADEVICE_MODULES"
        probe_sound_drivers
     fi
     
     if `is_substring_of " 02" " $PCICLASSES"`; then
        inline_external_file "NETDEVICE_MODULES"
        probe_networkdevice_drivers
     fi
     
     if `is_substring_of " 0d" " $PCICLASSES"`; then
        inline_external_file "NETDEVICE_MODULES"
        probe_wirelessnetwork_drivers
     fi
     /bin/busybox mdev -s
     /bin/busybox sync
     export MODULES2LOAD="$MODULES2LOAD `/bin/busybox cat /proc/modules 2>/dev/null | /bin/busybox cut -f1 -d" " 2>/dev/null`"
    fi
    
}
#
remove_unused_modules()
{
  local DRIVERS DRIVERS2REMOVE DRIVERS2KEEP DRIVER FOUND LSMODDRIVERS SYSDRIVERS

  if [ `/bin/busybox cat /proc/modules 2>/dev/null | /bin/busybox wc -l  2>/dev/null` -ge 1 ]; then
   DRIVERS2REMOVE=""
   DRIVERS2KEEP=""
   DRIVER=""
   FOUND=""
   # resolve dependencies
   DRIVERS=`/bin/busybox lspci -k 2>/dev/null | /bin/busybox cut -f5 -d" " 2>/dev/null | /bin/busybox tr "\n\t" " " 2>/dev/null`
   for DRIVER in $DRIVERS; do
     FOUND=`/bin/busybox grep "$DRIVER" /proc/modules  2>/dev/null | /bin/busybox cut -f1 -d" " 2>/dev/null | /bin/busybox tr "\n\t" " " 2>/dev/null`
     for D in $FOUND; do
     if `is_not_substring_of  "$D "  " $DRIVERS2KEEP " `; then
       DRIVERS2KEEP="$DRIVERS2KEEP $D "
     fi
     done
   done
   echodebug  "$INITPREF" "Drivers to keep:"
   echodebug "$INITPREF" ": $DRIVERS2KEEP"

   # 2nd step for refinement of kmodule dependencies
   DRIVERS=""
   for DRIVER in $DRIVERS2KEEP; do
     FOUND=`/bin/busybox grep "$DRIVER" /proc/modules  2>/dev/null | /bin/busybox cut -f1 -d" " 2>/dev/null| /bin/busybox tr "\n\t" " " 2>/dev/null`
     for D in $FOUND; do
     if  `is_not_substring_of  "$D "  " $DRIVERS2KEEP " `; then
       DRIVERS2KEEP="$DRIVERS2KEEP $D "
     fi
     done
   done

   echodebug  "$INITPREF" "Drivers to keep:"
   echodebug  "$INITPREF" ": $DRIVERS2KEEP"

   # 3rd step of refinement
   DRIVER=""
   FOUND=""
   while read DRIVER NUMBER DEPEND REST; do
      #DRIVER=`echo "$line"| /bin/busybox cut -f1 -d" " 2>/dev/null`
      FOUND=`/bin/busybox grep "$DRIVER" /proc/modules 2>/dev/null | /bin/busybox wc -l 2>/dev/null`
      if [ $DEPEND -eq 0 -a $FOUND -eq 1 ]; then
       if  `is_not_substring_of  "$DRIVER "  " $DRIVERS2KEEP " `; then
         DRIVERS2REMOVE="$DRIVERS2REMOVE $DRIVER"
       fi
      fi
   done < /proc/modules
   #DRIVERS=`/bin/busybox find /sys  -name uevent  -exec cat '{}' 2>/dev/null \; | /bin/busybox grep DRIVER 2>/dev/null | /bin/busybox cut -f2- -d "=" 2>/dev/null | /bin/busybox tr "\n" " " 2>/dev/null`
   
   DRIVERS2KEEP="$DRIVERS2KEEP $DEFAULT_DRIVERS2KEEP $FILEDRIVERS"
   #SYSDRIVERS="$DEFAULT_SYSBUSDRIVERS $DEFAULT_SYSATADRIVERS $DEFAULT_SYSUSBDRIVERS $DEFAULT_SYSVIDEODRIVERS"
   echodebug "$INITPREF" "Drivers to keep:"
   echodebug "$INITPREF" ": $DRIVERS2KEEP"
   echodebug "$INITPREF" "Removing unnecessary drivers.... "
   for DRIVER in $DRIVERS2REMOVE; do
     #DRIVERINUSE=""
     if `is_not_substring_of "$DRIVER " " $ALLFOUNDMODULES "`; then
      remove_kernelmodule "$DRIVER"
      echofile "$INITPREF" "Kernel driver '$DRIVER' removed with '$?'"
     fi
   done
   /bin/busybox sync 2>/dev/null
   
   echofile "$INITPREF" ".... and more unnecessary drivers:"
   while read DRIVER NUMBER DEPEND REST; do
    #DRIVER=`echo "$line"| /bin/busybox cut -f1 -d" " 2>/dev/null`
    #FOUND=`echo $DRIVERS2KEEP | /bin/busybox grep "$DRIVER" 2>/dev/null`
    if `is_substring_of  " $DRIVER " " $DRIVERS2REMOVE "`; then
      if `is_not_substring_of  "$DRIVER " " $DRIVERS2KEEP $ALLFOUNDMODULES "`; then
        remove_kernelmodule "$DRIVER"
        echofile "$INITPREF" "Kernel driver '$DRIVER' removed with '$?'"
      fi
    fi
   done < /proc/modules

   echodebug "$INITPREF" "...done removing unused modules "
   /bin/busybox sync 2>/dev/null
  else
   echodebug "$INITPREF" "no modules found loaded, continuing..."
  fi

}
#
probe_whitelisted_modules()
{
    local DRIVER
    if [ "$WHITELIST_MODULES" != "" ]; then
      export WHITELIST_MODULES
      probe_drivers "WHITELIST_MODULES"
    else
      echoconsole  "$1" "No whitelisted modules to load!"
    fi
}
#
remove_blacklisted_modules()
{
    local DRIVER
    if [ "$MODULE_BLACKLIST" != "" ]; then
      DRIVER=""
      echoconsole "$1" "Removing blacklisted kernelmodules: "
      remove_drivers "MODULE_BLACKLIST"
      #for DRIVER in $MODULE_BLACKLIST; do
      #  remove_kernelmodule "$DRIVER"
      #done
    else
      echoconsole  "$1" "No blacklisted kernelmodule to remove!"
    fi
}
#
export MODPROBE_FUNCTIONS_READ="1"
echoconsole "$INITPREF" "modprobe-functions:   All functions read in!"
#

