#
#  I386-FUNCTIONS architecture specific functions and variables for YaIniT Universal INIT Tool with busybox
#  (C) Dieter Miosga , 2008-2014-05-13
#
#set -x

ALLEXTENTS="x86 x86mmx i686 k6p3 k7p4 k8p5 k9c2 atom core2 coreix coreavx coreavx2 k18 k16 k15 k14 k10 k9 k8 k7 k6 k5"
ALLSUBEXTENTS="x86 mmx sse sse2 sse3 ssse3 sse4a sse4x avx avx2"
ALLCPUMODS="fpu mmx 3dnow 3dnowext pae pat sse sse2 pni ssse3 sse4  sse4_1 sse4_2 sse4a avx avx2 bmi bmi2"
ALLRTEXTENTS="tar.bz2 tar.lzma tar.xz tar.gz"  # "tar.Z tar.z tgz tbz tlz txz tz"
#
set_cpuvars()
{

  local  K18 K16 K15 K14 K10 K9 K8 K7 K6 K5 COREAVX2 COREAVX COREX K9C2 ATOM K8P5 K7P4 K6P3 I686 I486 I586TSC  
  K15=""
  K14=""
  K16=""
  K18=""
  K10=""
  COREIX=""
  COREAVX=""
  COREAVX2=""
  K9C2=""
  ATOM=""
  K8P5=""
  K7P4=""
  K6P3=""
  I686=""
  I586TSC=""
  I486=""
  K9=""
  K8=""
  K7=""
  K6=""
  K5=""
  local K15TEXT K14TEXT k16TEXT K17TEXT K10TEXT COREAVX2TEXT COREAVXTEXT COREXTEXT K9C2TEXT ATOMTEXT K8P5TEXT K7P4TEXT K6P3TEXT I586TSCTEXT I686TEXT I486TEXT K9TEXT K8TEXT K7TEXT K6TEXT K5TEXT
  I486TEXT="generic x86 from i486 on with FPU-Floating Point Unit /
   no MMX, no 3DNow! (AMD K5, Intel 486 )"
  I586TSCTEXT="generic i586 with TSC and MMX support for all Pentium-MMX compatibles /
  AMD K6 with MMX support, without 3DNow!"
  I686TEXT="generic i686 and MMX support for all Pentium-II compatibles /
  AMD K6 (Athlon/Duron) with MMX support without 3DNow!"
  K6P3TEXT="i686 with generic MMX,SSE support for Pentium 3 / AMD K6/K7
   (Barton Athlon/Sempron) without 3DNow!"
  K7P4TEXT="i686 with generic MMX,SSE,SSE2 support for Pentium4 /AMD K7/K8
   or Pentium-M / Celeron compatibles without 3DNow!"
  K8P5TEXT="Intel Prescott or higher with generic MMX,SSE,SSE2,SSE3/PNI support,
  AMD K8 (Opteron/Athlon-64/-FX/Pentium D/Celeron D) without 3DNow!, EM64T"
  K9C2TEXT="Nocona/EM64T or higher with generic support for Intel Core2 /
  AMD K9/K10 Family with MMX,SSE,SSE2,SSE3,x86_64-EM64T support, without SSSE3, SSE4x, 3DNow!"
  ATOMTEXT="Intel Penryn core with SSSE3 for Intel Atom/Core2 compatibles, with EM64T "
  COREXTEXT="Intel Generic Core2 / Core i3/i5/i7,(Nehalem, Intel Core)
  with x86_64, SSE3/PNI, SSSE3, SSE4.1 and SSE4.2 support"
  COREAVXTEXT="Intel Generic Core-AVX (Sandybridge, Ivy Bridge)
  with x86_64, SSE3/PNI, SSSE3, SSE4.1, SSE4.2 and AVX, PCLMUL, AES support"
  COREAVX2TEXT="Intel Generic Core-AVX2 (Haswell, Broadwell)
  with x86_64,SSE3/PNI, SSSE3, SSE4.1, SSE4.2, AVX, BMI and AVX2"
  K18TEXT="AMD Family 18 core (Excavator) for AMD K18 with support for
  3DNOW,3DNOWEXT,MMX,SSE,SSE2,SSE3,SSSE3,SSE4a,SSE4.x,AVX,AVX2,BMI2,x86_64"
  K16TEXT="AMD Family 16 core (Bobcat II Jaguar) for AMD K16 with support for
  3DNOW,3DNOWEXT,MMX,SSE,SSE2,SSE3,SSSE3,SSE4a,SSE4.x,BMI, x86_64"
  K15TEXT="AMD Family 15 core (Zambezi,Bulldozer, Piledriver FX-series)  for AMD K15
  with support for 3DNOW,3DNOWEXT,MMX,SSE,SSE2,SSE3,SSSE3,SSE4a,SSE4.x,AVX,x86_64"
  K14TEXT="AMD Family 14 core (Bobcat I) for AMD K14 with support for
  3DNOW,3DNOWEXT,MMX,SSE,SSE2,SSE3,SSSE3,SSE4a,x86_64"
  K10TEXT="AMD Family 10 (Phenom, Athlon II, Barcelona) for AMD K10,
  with support for 3DNOW,3DNOWEXT,MMX,SSE,SSE2,SSE3,SSE4a,x86_64"
  K9TEXT="AMD Family 8 - sse3 core for AMD K8/Opteron with support for
  3DNOW,3DNOWEXT,MMX,SSE,SSE2,SSE3/PNI,x86_64"
  K8TEXT="AMD Family 8 - sse2 core  for AMD K8 with support for
  3DNOW,3DNOWEXT,MMX,SSE,SSE2,x86_64"
  K7TEXT="AMD Family 7 - sse athlon-4/-xp/-mp core  for AMD K7,
  with support for 3DNOW,3DNOWEXT,MMX,SSE,x86_32"
  K6TEXT="AMD Family 6 - athlon-thunderbird core for AMD K6/i586
  with support for 3DNOW,3DNOWEXT,MMX,x86_32"
  K5TEXT="AMD Family 5 - Winchip2 core  for AMD K5/i486
  with support for 3DNOW,MMX,x86_32"


  CPUINFO=`/bin/busybox cat /proc/cpuinfo 2>/dev/null`
  if  [ "$CPUINFO" = "" ]; then 
    echoconsole "$1" " nothing to optimize"
    echoconsole "$1" " kernel shows no /proc/cpuinfo - reconfigure,rebuild?"
    return 1
  fi
  
  MEMINFO=`/bin/busybox cat /proc/meminfo 2>/dev/null` 
  if [ "$MEMINFO" != "" ]; then
    # total ram memory in kB
    TOTALMEM=`/bin/busybox grep "MemTotal:" </proc/meminfo |  /bin/busybox cut -f2 -d ':' | /bin/busybox tr -d [:alpha:]" " 2>/dev/null`
  else
    echoconsole "$1" " kernel shows no /proc/meminfo - reconfigure,rebuild?"
    #return 2
  fi
  
  NRCPUS=`/bin/busybox grep "cpu cores" </proc/cpuinfo | /bin/busybox tr -d ' ' | /bin/busybox cut -f2 -d: 2>/dev/null`
  NRCPUS=$(echo $NRCPUS | /bin/busybox cut -f1 -d" " 2>/dev/null)
  CPUFREQ=`/bin/busybox grep "cpu MHz" </proc/cpuinfo | /bin/busybox tr -d ' ' | /bin/busybox cut -f2 -d: | /bin/busybox cut -f1 -d. 2>/dev/null`
  CPUFREQ=$(echo $CPUFREQ | /bin/busybox cut -f1 -d" " 2>/dev/null)
  CPUMODEL=$(echo `/bin/busybox cat /proc/cpuinfo` | /bin/busybox grep "model name" | /bin/busybox cut -f6 -d: 2>/dev/null)$(echo `/bin/busybox cat /proc/cpuinfo` | /bin/busybox grep "model name"  | /bin/busybox cut -f7 -d: | /bin/busybox cut -c 1-3  2>/dev/null)
  L2CACHE=$(echo `/bin/busybox grep "cache size" </proc/cpuinfo | /bin/busybox tr -d " " | /bin/busybox cut -f2 -d:` | /bin/busybox cut -f1 -dK 2>/dev/null)
  export TOTALMEM CPUMODEL CPUFREQ L1CACHE L2CACHE NRCPUS L3CACHE

  #set -x
  # cpuid optimization variables:
  EXTENDU=""
  
  # cascade top down through x86 mainstream architectures' common instruction sets
  if `is_substring_of  "3dnow"  "$CPUINFO" `; then

   # AMD family last  / AVX2/BMI/BMI2/AVX-SSE4A,SSSE3,SSE4.x  with 3dnow extensions or 3dnowprefetch   
   if   `is_substring_of  "avx2 "  "$CPUINFO " `; then
      K18=avx2
      EXTENDU="k18"
      ARCHTEXT="$K18TEXT"
   # AMD family 15 / 16 / AVX-SSE4A,SSSE3,SSE4.x  with 3dnow extensions or 3dnowprefetch
   elif  `is_substring_of  "sse4_2 "  "$CPUINFO" ` ; then
     if `is_substring_of  "bmi "  "$CPUINFO" `; then
      K16=avx
      EXTENDU="k16"
      ARCHTEXT="$K16TEXT"
     else 
      K15=avx
      EXTENDU="k15"
      ARCHTEXT=$K15TEXT
     fi 
   # AMD family 10 / 14 /K10-SSE4A-SSE3 / K14-SSE4A-SSSE3  with 3dnowext
   elif   `is_substring_of  "sse4a "  "$CPUINFO" ` ; then
     if   `is_substring_of  "ssse3 "  "$CPUINFO" `; then
      K14=sse4a
      EXTENDU="k14"
      ARCHTEXT="$K14TEXT"
     else
      K10=sse4a
      EXTENDU="k10"
      ARCHTEXT=$K10TEXT
     fi
   # AMD family K8-SSE3 with 3dnowext
   elif `is_substring_of  "pni "  "$CPUINFO" `; then 
      K9=sse3
      EXTENDU="k9"
      ARCHTEXT=$K9TEXT
   # AMD family K8-SSE2 with 3dnowext
   elif `is_substring_of  "sse2 "  "$CPUINFO" `; then 
      K8=sse2
      EXTENDU="k8"
      ARCHTEXT=$K8TEXT
   # AMD family K7-SSE with 3dnowext
   elif `is_substring_of  "sse "  "$CPUINFO" `; then 
      K7=sse
      EXTENDU="k7"
      ARCHTEXT=$K7TEXT
   elif `is_substring_of  "mmx "  "$CPUINFO" `; then
      K5=mmx
      EXTENDU="k5"
      ARCHTEXT=$K5TEXT
   #elif fpu only supporting processors without 3dnow or mmx of AMD must conform i486 
   fi
   MAXCMDSET=$K15$K14$K16$K18$K10$K9$K8$K7$K5

  else
    #  general intel x86 architectures without 3dnow
     
    if `is_substring_of  "sse4_"  "$CPUINFO" `; then 
      if `is_substring_of  "avx2 "  "$CPUINFO" `; then
        COREAVX=avx2
        EXTENDU="coreavx2"
        ARCHTEXT=$COREAVX2TEXT
      #  Intel Core2 / Core i3/i5/i7 Nehalem superset with ssse3 and sse4.x              
      elif  `is_substring_of  "avx "  "$CPUINFO" ` ; then
        COREAVX=avx
        EXTENDU="coreavx"
        ARCHTEXT=$COREAVXTEXT      
      elif `is_substring_of   "ssse3 "  "$CPUINFO" `; then 
        COREX=sse4
        EXTENDU="corex"
        ARCHTEXT=$COREXTEXT
      # generic Nocona, a subset for K8-sse3,Core2/Penryn/Phenom without ssse3 but sse4.x
      # the sse4.x instructions are not respected
      elif  `is_substring_of  "pni "  "$CPUINFO" `; then 
         K9C2=sse4
         EXTENDU="k9c2"
         ARCHTEXT=$K9C2TEXT
      fi
    elif `is_substring_of  "ssse3 "  "$CPUINFO" `; then 
         ATOM=ssse3
         EXTENDU="atom"
         ARCHTEXT=$ATOMTEXT
    elif `is_substring_of  "pni "  "$CPUINFO" `;  then 
         if   `is_substring_of "cx16 "  "$CPUINFO" ` || `is_substring_of "dtes64 "  "$CPUINFO" ` ; then 
         ##  generic sse3/pni with probe for EM64T and Nocona
            K9C2=sse3
            EXTENDU="k9c2"
            ARCHTEXT=$K9C2TEXT
         else
         #  #  generic sse3/pni without EM64T for Prescott compatibles   K8P5=sse3
            EXTENDU="k8p5"
            ARCHTEXT=$K8P5TEXT
         fi
    elif `is_substring_of  "sse2 "  "$CPUINFO" `; then 
         K7P4=sse2
         EXTENDU="k7p4"
         ARCHTEXT=$K7P4TEXT
    elif `is_substring_of  "sse "  "$CPUINFO" `;  then 
         K6P3=sse
         EXTENDU="k6p3"
         ARCHTEXT=$K6P3TEXT
    elif `is_substring_of   "mmx "  "$CPUINFO" `;  then 
      if `is_substring_of   "pat "  "$CPUINFO" `;  then 
         I686=mmx
         EXTENDU="i686"
         ARCHTEXT=$I686TEXT
      else
         I586TSC=mmx
         EXTENDU="x86mmx"
         ARCHTEXT=$I586TSCTEXT
      fi
    elif `is_substring_of   "fpu "  "$CPUINFO" `;  then 
         I486=fpu
         EXTENDU="x86"
         ARCHTEXT=$I486TEXT
    #elif 386:  not supported!!!
    fi
    MAXCMDSET=$COREAVX2$COREAVX$COREX$K9C2$ATOM$K8P5$K7P4$K6P3$I686$I486$I586TSC
  fi
  if [ "$EXTENDU" = "" ]; then EXTENDU="x86"; MAXCMDSET=fpu; ARCHTEXT=$I486TEXT; fi
  export EXTENDU MAXCMDSET ARCHTEXT
  #set +x
  return 0
}
#
set_cpuvars_standalone()
{
  #  needs only /bin/busybox here, no further previous function loading required
  local K18 K16 K15 K14 K10 K9 K8 K7 K6 K5 COREAVX COREAVX2 COREX K9C2 ATOM K8P5 K7P4 K6P3 I686 I486 I586TSC
  K18=""
  K16=""
  K15=""
  K14=""
  K10=""
  COREIX=""
  COREAVX=""
  COREAVX2=""
  K9C2=""
  ATOM=""
  K8P5=""
  K7P4=""
  K6P3=""
  I686=""
  I586TSC=""
  I486=""
  K9=""
  K8=""
  K7=""
  K6=""
  K5=""
  local K15TEXT K14TEXT k16TEXT K18TEXT K10TEXT COREAVX2TEXT COREAVXTEXT COREXTEXT K9C2TEXT ATOMTEXT K8P5TEXT K7P4TEXT K6P3TEXT I586TSCTEXT I686TEXT I486TEXT K9TEXT K8TEXT K7TEXT K6TEXT K5TEXT
  I486TEXT="generic x86 from i486 on with FPU-Floating Point Unit /
   no MMX, no 3DNow!"
  I586TSCTEXT="generic i586 with TSC and MMX support for all Pentium-MMX compatibles /
  AMD K5/K6 Thunderbird (Athlon/Duron) with MMX support without 3DNow!"
  I686TEXT="generic i686 and MMX support for all Pentium-II compatibles /
  AMD K5/K6 Thunderbird (Athlon/Duron) with MMX support without 3DNow!"
  K6P3TEXT="i686 with generic SSE support for Pentium 3 / AMD K6/K7
   (Barton Athlon/Sempron) with SSE without 3DNow!"
  K7P4TEXT="i686 with generic SSE2 support for Pentium4 /AMD K7/K8
   or Pentium-M / Celeron compatibles with SSE2 without 3DNow!"
  K8P5TEXT="Prescott or higher with generic SSE3/PNI support 
  AMD K8 (Opteron/Athlon64/FX/X2 / Pentium D/Celeron D) with SSE3 without 3DNow!"
  ATOMTEXT="Penryn core with SSSE3 for Intel Atom/Core2 compatibles with EM64T "
  K9C2TEXT="Nocona/EM64T or higher with generic support for Intel Core2 /
  AMD K9/K10 Family with x86_64 and full SSE3 without SSE4x without 3DNow!"
  COREXTEXT="Generic Core2 / Core i3/i5/i7,(Nehalem)
  with x86_64,SSE3/PNI,SSE4.1 and SSE4.2, without SSSE3"
  COREAVXTEXT="Generic Core-x-AVX
  with x86_64,SSE3/PNI, SSSE3, SSE4.1, SSE4.2 and AVX, PCLMUL,AES"
  COREAVX2TEXT="Generic Core-x-AVX2
  with x86_64,SSE3/PNI, SSSE3, SSE4.1, SSE4.2, AVX and AVX2"
  K18TEXT="AMD Family 18 core (Excavator) with support for
  3DNOW,3DNOWEXT,MMX,SSE3,SSSE3,SSE4a,SSE4.2,AVX,AVX2,BMI2 for AMD K18, x86_64"
  K16TEXT="AMD Family 16 core (Bobcat II) with support for
  3DNOW,3DNOWEXT,MMX,SSE,SSE2,SSE3,SSSE3,SSE4a,SSE4.1,SSE4.2,BMI for AMD K16, x86_64"
  K15TEXT="AMD Family 15 core (Zambezi,Bulldozer, Piledriver FX-series) with support for
  3DNOW,3DNOWEXT,MMX,SSE,SSE2,SSE3,SSSE3,SSE4a,SSE4.1,SSE4.2,AVX for AMD K15, x86_64"
  K14TEXT="AMD Family 14 core (Bobcat I) with support for
  3DNOW,3DNOWEXT,MMX,SSE,SSE2,SSE3,SSSE3,SSE4a for AMD K14, x86_64"
  K10TEXT="AMD Family 10 (Phenom, Athlon II, Barcelona) core with support for
  3DNOW,3DNOWEXT,MMX,SSE,SSE2,SSE3,SSE4a for AMD K10, x86_64"
  K9TEXT="AMD Family 8 - sse3 core with support for
  3DNOW,3DNOWEXT,MMX,SSE,SSE2,SSE3/PNI for AMD K8/Opteron, x86_64"
  K8TEXT="AMD Family 8 - sse2  core with support for
  3DNOW,3DNOWEXT,SSE,SSE2 for AMD K8, x86_64"
  K7TEXT="AMD Family 7 - sse athlon-4/-xp/-mp core with support for
  3DNOW,3DNOWEXT,MMX,SSE for AMD K7, x86_32"
  K6TEXT="AMD Family 6 - athlon-thunderbird core with support for
  3DNOW,3DNOWEXT,MMX for AMD K6/i586, x86_32"
  K5TEXT="AMD Family 5 - Winchip2 core with support for
  3DNOW,MMX for AMD K5/i486, x86_32"


  CPUINFO=`/bin/busybox cat /proc/cpuinfo 2>/dev/null`
  if  [ "$CPUINFO" = "" ]; then 
    echoconsole "$1" " nothing to optimize"
    echoconsole "$1" " kernel shows no CPUINFO - reconfigure,rebuild?"
    return 1
  fi
  
  MEMINFO=`/bin/busybox cat /proc/meminfo 2>/dev/null` 
  if [ "$MEMINFO" != "" ]; then
    # total ram memory in kB
    TOTALMEM=`/bin/busybox grep "MemTotal:" </proc/meminfo |  /bin/busybox cut -f2 -d ':' | /bin/busybox tr -d [:alpha:]" " 2>/dev/null`
  else
    echoconsole "$1" " nothing to optimize"
    echoconsole "$1" " kernel shows no /proc/meminfo - reconfigure,rebuild?"
  fi
  
  NRCPUS=`/bin/busybox grep "cpu cores" </proc/cpuinfo | /bin/busybox tr -d ' ' | /bin/busybox cut -f2 -d: 2>/dev/null`
  NRCPUS=$(echo $NRCPUS | /bin/busybox cut -f1 -d" " 2>/dev/null)
  CPUFREQ=`/bin/busybox grep "cpu MHz" </proc/cpuinfo | /bin/busybox tr -d ' ' | /bin/busybox cut -f2 -d: | /bin/busybox cut -f1 -d. 2>/dev/null`
  CPUFREQ=$(echo $CPUFREQ | /bin/busybox cut -f1 -d" " 2>/dev/null)
  CPUMODEL=$(echo `/bin/busybox cat /proc/cpuinfo` | /bin/busybox grep "model name" | /bin/busybox cut -f6 -d: 2>/dev/null)$(echo `/bin/busybox cat /proc/cpuinfo` | /bin/busybox grep "model name"  | /bin/busybox cut -f7 -d: | /bin/busybox cut -c 1-3  2>/dev/null)
  L2CACHE=$(echo `/bin/busybox grep "cache size" </proc/cpuinfo | /bin/busybox tr -d " " | /bin/busybox cut -f2 -d:` | /bin/busybox cut -f1 -dK 2>/dev/null)
  export TOTALMEM CPUMODEL CPUFREQ L1CACHE L2CACHE NRCPUS L3CACHE

  #set -x
  # cpuid optimization variables:
  EXTENDU=""
  
  # cascade top down through x86 mainstream architectures' common instruction sets
  if [ "`/bin/busybox grep "3dnow" </proc/cpuinfo`" != "" ]; then

   # AMD family last  / AVX2/BMI/BMI2/AVX-SSE4A,SSSE3,SSE4.x  with 3dnow extensions or 3dnowprefetch   
   if   [ "`/bin/busybox grep "avx2" </proc/cpuinfo`" != "" ]; then
      K18=avx2
      EXTENDU="k18"
      ARCHTEXT="$K18TEXT"
   # AMD family 15 / 16 / AVX-SSE4A,SSSE3,SSE4.x  with 3dnow extensions or 3dnowprefetch
   elif   [ "`/bin/busybox grep "sse4_2" </proc/cpuinfo`" != "" ]; then
     if [ "`/bin/busybox grep "bmi" </proc/cpuinfo`" != "" ]; then
      K16=avx
      EXTENDU="k16"
      ARCHTEXT="$K16TEXT"
     else 
      K15=avx
      EXTENDU="k15"
      ARCHTEXT=$K15TEXT
     fi 
   # AMD family 10 / 14 /K10-SSE4A-SSE3 / K14-SSE4A-SSSE3  with 3dnowext
   elif   [ "`/bin/busybox grep "sse4a" </proc/cpuinfo`" != "" ]; then
     if   [ "`/bin/busybox grep "ssse3" </proc/cpuinfo`" != "" ]; then
      K14=sse4a
      EXTENDU="k14"
      ARCHTEXT="$K14TEXT"
     else
      K10=sse4a
      EXTENDU="k10"
      ARCHTEXT=$K10TEXT
     fi
   # AMD family K8-SSE3 with 3dnowext
   elif [ "`/bin/busybox grep "pni" </proc/cpuinfo`" != "" ]; then 
      K9=sse3
      EXTENDU="k9"
      ARCHTEXT=$K9TEXT
   # AMD family K8-SSE2 with 3dnowext
   elif [ "`/bin/busybox grep "sse2" </proc/cpuinfo`" != "" ]; then 
      K8=sse2
      EXTENDU="k8"
      ARCHTEXT=$K8TEXT
   # AMD family K7-SSE with 3dnowext
   elif [ "`/bin/busybox grep "sse" </proc/cpuinfo`" != "" ]; then 
      K7=sse
      EXTENDU="k7"
      ARCHTEXT=$K7TEXT
   elif [ "`/bin/busybox grep "mmx" </proc/cpuinfo`" != "" ]; then
      K5=mmx
      EXTENDU="k5"
      ARCHTEXT=$K5TEXT
   #elif fpu only supporting processors without 3dnow or mmx of AMD must conform i486 
   fi
   MAXCMDSET=$K15$K14$K16$K18$K10$K9$K8$K7$K5

  else
    #  general intel x86 architectures without 3dnow
     
    if [ "`/bin/busybox grep "sse4_" </proc/cpuinfo`" != "" ]; then 
      if [ "`/bin/busybox grep "avx2" </proc/cpuinfo`" != "" ]; then
        COREAVX=avx2
        EXTENDU="coreavx2"
        ARCHTEXT=$COREAVXTEXT
      #  Intel Core2 / Core i3/i5/i7 Nehalem superset with ssse3 and sse4.x              
      elif  [ "`/bin/busybox grep "avx" </proc/cpuinfo`" != "" ]; then
        COREAVX=avx
        EXTENDU="coreavx"
        ARCHTEXT=$COREAVXTEXT      
      elif [ "`/bin/busybox grep "ssse3" </proc/cpuinfo`" != "" ]; then 
        COREX=sse4
        EXTENDU="corex"
        ARCHTEXT=$COREXTEXT
      # generic Nocona, a subset for K8-sse3,Core2/Penryn/Phenom without ssse3 but sse4.x
      # the sse4.x instructions are not respected
      elif  [ "`/bin/busybox grep "pni" </proc/cpuinfo`" != "" ]; then 
         K9C2=sse4
         EXTENDU="k9c2"
         ARCHTEXT=$K9C2TEXT
      fi
    elif [ "`/bin/busybox grep "ssse3" </proc/cpuinfo`" != "" ]; then 
         ATOM=ssse3
         EXTENDU="atom"
         ARCHTEXT=$ATOMTEXT
    ##  generic sse3/pni with probe for EM64T and Nocona
    elif [ "`/bin/busybox grep "pni" </proc/cpuinfo`" != "" ];  then 
         if [ "`/bin/busybox grep "cx16" </proc/cpuinfo`" != "" -o "`/bin/busybox grep "dtes64" </proc/cpuinfo`" != "" ]; then 
            K9C2=sse3
            EXTENDU="k9c2"
            ARCHTEXT=$K9C2TEXT
         #  #  generic sse3/pni without EM64T for Prescott compatibles
         else
            K8P5=sse3
            EXTENDU="k8p5"
            ARCHTEXT=$K8P5TEXT
         fi
    elif [ "`/bin/busybox grep "sse2" </proc/cpuinfo`" != "" ]; then 
         K7P4=sse2
         EXTENDU="k7p4"
         ARCHTEXT=$K7P4TEXT
    elif [ "`/bin/busybox grep "sse" </proc/cpuinfo`" != "" ];  then 
         K6P3=sse
         EXTENDU="k6p3"
         ARCHTEXT=$K6P3TEXT
    elif [ "`/bin/busybox grep "mmx" </proc/cpuinfo`" != "" ];  then 
      if [ "`/bin/busybox grep "pat" </proc/cpuinfo`" != "" ];  then 
         I686=mmx
         EXTENDU="i686"
         ARCHTEXT=$I686TEXT
      else
         I586TSC=mmx
         EXTENDU="x86mmx"
         ARCHTEXT=$I586TSCTEXT
      fi
    elif [ "`/bin/busybox grep "fpu" </proc/cpuinfo`" != "" ];  then 
         I486=fpu
         EXTENDU="x86"
         ARCHTEXT=$I486TEXT
    #elif 386:  not supported!!!
    fi
    MAXCMDSET=$COREAVX2$COREAVX$COREX$K9C2$ATOM$K8P5$K7P4$K6P3$I686$I486$I586TSC
  fi
  if [ "$EXTENDU" = "" ]; then EXTENDU="x86"; MAXCMDSET=fpu; ARCHTEXT=$I486TEXT; fi
  export EXTENDU MAXCMDSET ARCHTEXT
  #set +x
  return 0
}
#
KERNEXTENDU=""
#
set_kernvars()
{
  local EXT INITKERNVER
  EXT=""
  if [ "$KERNVER" != "" ]; then
   if [ "$1" = "simple" ]; then
    case $MAXCMDSET in
      $ARCH_CPU_FAMILY_1)
        EXT="$ARCH_CPU_EXTENSION_1"
      ;;
      $ARCH_CPU_FAMILY_2)
        EXT="$ARCH_CPU_EXTENSION_2"
      ;;
      $ARCH_CPU_FAMILY_3)
        EXT="$ARCH_CPU_EXTENSION_3"
      ;;
      $ARCH_CPU_FAMILY_4)
        EXT="$ARCH_CPU_EXTENSION_4"
      ;;
      $ARCH_CPU_FAMILY_5)
        EXT="$ARCH_CPU_EXTENSION_5"
      ;;
      $ARCH_CPU_FAMILY_6)
        EXT="$ARCH_CPU_EXTENSION_6"
      ;;
      $ARCH_CPU_FAMILY_7)
        EXT="$ARCH_CPU_EXTENSION_7"
      ;;
      $ARCH_CPU_FAMILY_8)
        EXT="$ARCH_CPU_EXTENSION_8"
      ;;
      $ARCH_CPU_FAMILY_9)
        EXT="$ARCH_CPU_EXTENSION_9"
      ;;
      $ARCH_CPU_FAMILY_10)
        EXT="$ARCH_CPU_EXTENSION_10"
      ;;
    esac
    [ "$EXT" = "" ] && EXT="$DEFAULT_ARCH_CPU_EXTENSION" 
   fi
   if [ "$1" != "simple" ]; then
    case $MAXCMDSET in
      fpu|mmx)
        EXT="2mxtsc"
      ;; 
      sse)
        EXT="2mxtsc"
      ;; 
      sse2)
        EXT="2se2"
      ;; 
      sse3|pni)
        EXT="2se3"
      ;; 
      ssse3)
        EXT="3se3"
      ;; 
      sse4.x|sse4x|sse4_1|sse4_2|sse4.*)
        EXT="3se42"
      ;; 
      sse4a)
        EXT="2se4a"
      ;;
      avx)
        EXT="avx"
      ;;
      avx2|bmi|bmi2)
        EXT="avx"
      ;;
      *)
        EXT="2mxtsc"
      ;;
    esac
   fi
  fi
  [ "$EXT" = "" ] && EXT="2mxtsc" 
  export KERNEXTENDU="$EXT"
}
#
set_previous_extent()
{
  local  EXT PREVEXT
  EXT="$1"
  PREVEXT=""
    # search matching EXTENT and assign the previous
    case $EXT in
      $ARCH_CPU_EXTENSION_1)
        PREVEXTEXT=""
      ;;
      $ARCH_CPU_EXTENSION_2)
        PREVEXT="$ARCH_CPU_EXTENSION_1"
      ;;
      $ARCH_CPU_EXTENSION_3)
        PREVEXT="$ARCH_CPU_EXTENSION_2"
      ;;
      $ARCH_CPU_EXTENSION_4)
        PREVEXT="$ARCH_CPU_EXTENSION_3"
      ;;
      $ARCH_CPU_EXTENSION_5)
        PREVEXT="$ARCH_CPU_EXTENSION_4"
      ;;
      $ARCH_CPU_EXTENSION_6)
        PREVEXT="$ARCH_CPU_EXTENSION_5"
      ;;
      $ARCH_CPU_EXTENSION_7)
        PREVEXT="$ARCH_CPU_EXTENSION_6"
      ;;
      $ARCH_CPU_EXTENSION_8)
        PREVEXT="$ARCH_CPU_EXTENSION_7"
      ;;
      $ARCH_CPU_EXTENSION_9)
        PREVEXT="$ARCH_CPU_EXTENSION_8"
      ;;
      $ARCH_CPU_EXTENSION_10)
        PREVEXT="$ARCH_CPU_EXTENSION_9"
      ;;
    esac 
    
    export KERNEXTENDU="$PREVEXT"
}
#
set_previous_cmdset()
{
  local  EXT PREVEXT
  EXT="$1"
  PREVEXT=""

    case $EXT in
    esac
    export MAXCMDSET="$PREVEXT"  
}
#
previous_matching_extent()
{
  # there must be two arguments
  if [ "$1" = "" ]; then echo ""; return 254; fi
  local  EXT PREVEXT
  EXT="$1"
  PREVEXT=""
    # search matching EXTENT and assign the previous
    case $EXT in
      x86)
#       I486="";I686="";K6P3="";K7P4="";K8P5="";K9C2="";K10I7=""
       PREVEXT=""
       ARCHTEXT=""
      ;;
      x86mmx)
#       I686="";I486="fpu";K6P3="";K7P4="";K8P5="";K9C2="";K10I7=""
       PREVEXT="x86"
       ARCHTEXT=$I486TEXT
      ;;
      k5)
#       I686="";I486="fpu";K6P3="";K7P4="";K8P5="";K9C2="";K10I7=""
       PREVEXT="x86"
       ARCHTEXT=$I486TEXT
      ;;
      k6p3)
#       K6P3="";I486="";I686="mmx";K7P4="";K8P5="";K9C2="";K10I7=""
       PREVEXT="x86mmx"
       ARCHTEXT=$I686TEXT
      ;;
      k6)
#       K6="";I486="";I686="";K5="mmx";K7P4="";K8P5="";K9C2="";K10I7=""
       PREVEXT="k5"
       ARCHTEXT=$K5TEXT
      ;;

      k7p4)
#       K7P4="";I486="";I686="";K6P3="sse";K8P5="";K9C2="";K10I7=""
       PREVEXT="k6p3"
       ARCHTEXT=$K6P3TEXT
      ;;
      k7)
#       K7="";I486="";I686="";K6="sse";K8P5="";K9C2="";K10I7=""
       PREVEXT="k6"
       ARCHTEXT=$K6TEXT
      ;;

      k8p5)
#       K8P5="";I486="";I686="";K6P3="";K7P4="sse2";K9C2="";K10I7=""
       PREVEXT="k7p4"
       ARCHTEXT=$K7P4TEXT
      ;;
      k8)
#       K8="";I486="";I686="";K6P3="";K7P4="sse2";K9C2="";K10I7=""
       PREVEXT="k7"
       ARCHTEXT=$K7TEXT
      ;;

      k9c2)
#       K9C2="";I486="";I686="";K6P3="";K7P4="";K8P5="pni";K10I7=""
       PREVEXT="k8p5"
       ARCHTEXT=$K8P5TEXT
      ;;
      k9)
#       K9="";I486="";I686="";K6P3="";K7P4="";K8="pni";K10I7=""
       PREVEXT="k8"
       ARCHTEXT=$K8TEXT
      ;;
      k10|k14|k12)
#       K9="";I486="";I686="";K6P3="";K7P4="";K8="pni";K10I7=""
       PREVEXT="k9"
       ARCHTEXT=$K9TEXT
      ;;

      atom|corex)
#       K8P5="";I486="";I686="";K6P3="";K7P4="";K9C2="pni";K10I7=""
       PREVEXT="k9c2"
       ARCHTEXT=$K9C2TEXT
      ;;
      coreavx)
#       K8P5="";I486="";I686="";K6P3="";K7P4="";K9C2="pni";K10I7=""
       PREVEXT="corex"
       ARCHTEXT=$COREXTEXT
      ;;
      k15|k16)
#       K8P5="";I486="";I686="";K6P3="";K7P4="";K9C2="pni";K10I7=""
       PREVEXT="k10"
       ARCHTEXT=$K10TEXT
      ;;
      k18)
#       K8P5="";I486="";I686="";K6P3="";K7P4="";K9C2="pni";K10I7=""
       PREVEXT="k15"
       ARCHTEXT=$K15TEXT
      ;;
    esac
    echo "$PREVEXT"
    if [ "$PREVEXT" = "" ]; then
      return 1
    fi
    return 0
}
#
previous_matching_cmdset()
{
  # there must be an argument
  if [ "$1" = "" ]; then echo ""; return 254; fi
  local  EXT
  EXT="$1"
  local K15 K14 K16 K18 K10 K9 K8 K7 K6 K5 COREAVX COREAVX2 COREX K9C2 ATOM K8P5 K7P4 K6P3 I686 I486 I586TSC 

    # search matching EXTENT and assign the previous
    case $EXT in
      fpu)
       I486="";I686="";K6P3="";K7P4="";K8P5="";ATOM="";K9C2="";COREX="";K10=""
#       PREVEXT=""
      ;;
      mmx)
       I686="";I486="fpu";K6P3="";K7P4="";K8P5="";ATOM="";K9C2="";COREX="";K10=""
#       PREVEXT="x86"
      ;;
      sse)
       K6P3="";I486="";I686="mmx";K7P4="";K8P5="";ATOM="";K9C2="";COREX="";K10=""
#       PREVEXT="x86mmx"
      ;;
      sse2)
       K7P4="";I486="";I686="";K6P3="sse";K8P5="";ATOM="";K9C2="";COREX="";K10=""
#       PREVEXT="k6p3"
      ;;
      pni|sse3)
       K8P5="";I486="";I686="";K6P3="";K7P4="sse2";ATOM="";K9C2="";COREX="";K10=""
#       PREVEXT="k7p4"
      ;;
      sse4)
       K9C2="";I486="";I686="";K6P3="";K7P4="";K8P5="sse3";ATOM="";COREX="";K10=""
#       PREVEXT="k8p5"
      ;;
      ssse3)
       ATOM="";I486="";I686="";K6P3="";K7P4="";K8P5="";K9C2="sse3";COREX="";K10=""
#       PREVEXT="k9c2"
      ;;
      sse4.2|sse4.1|sse4x|sse4_1|sse4_2)
       COREX="";I486="";I686="";K6P3="";K7P4="";K8P5="";ATOM="";K9C2="ssse3";K10=""
#       PREVEXT="k9c2"
      ;;
      sse4a)
       K10="";I486="";I686="";K6P3="";K7P4="";K8P5="sse3";ATOM="";K9C2="";COREX=""
#       PREVEXT="k9c2"
      ;;
      avx)
       K10="";I486="";I686="";K6P3="";K7P4="";K8P5="";ATOM="";K9C2="sse3";COREX=""
#       PREVEXT="k9c2"
      ;;
      bmi|bmi2|avx2)
       K10="";I486="";I686="";K6P3="";K7P4="";K8P5="";ATOM="";K9C2="avx";COREX=""
#       PREVEXT="k9c2"
      ;;

    esac
    echo "$I486$I686$K6P3$K7P4$K8P5$ATOM$K9C2$COREX$K10"
    if [ "$I486$I686$K6P3$K7P4$K8P5$ATOM$K9C2$COREX$K10" = "" ]; then
      return 1
    fi
    return 0
}
#
set_arch_parms()
{
  set_cpuvars "$1"
  cmdset_optimize "$1" "$2"
}
#
branch_i386()
{
   boot_on
}
#
kexec_reboot()
{
  #debug_log "do_reboot" "$*"
  /bin/kexec -v  2>/dev/null
  if [ $? -ne 0  ]; then
    echoconsole "" "..... kexec not found or not executable !"
    return 3
  fi
  #  kexec needs /lib/libz.*
  if [ "$(/bin/busybox ls -1 /lib/libz* 2>/dev/null)" = "" -a "$(/bin/busybox ls -1 /usr/lib/libz* 2>/dev/null)" = "" ]; then
    echoconsole ""  "..... kexec needs libz and is not otherwise executable !"
    return 4
  fi
  if [ -e "$1" ]; then
    local ADD COMMAND  INITRDVAR
    COMMAND="`/bin/busybox cat /proc/cmdline`"
    ADD=`change_cmdline`
    COMMAND="$(echo $COMMAND $ADD)"
    #  retain_initrd does not work over all architectures
    #if [ "$(echo $COMMAND | /bin/busybox grep "retain_initrd" 2>/dev/null)" != "" ]; then
    #   INITRDVAR="--reuseinitrd"
    #else
    if [ -e "$2" ]; then
      INITRD="$2"
    fi
    if [ "$INITRD" != "" ]; then
      INITRDVAR="--initrd=$INITRD"
    else
      INITRDVAR=""
    fi
    #/bin/busybox cp -f /$MOUNTDIR/$(/bin/busybox basename $BOOTDEV)/boot/$INITRD  /boot/$INITRD  2>/dev/null
    #fi
    # do it with making sure that kernel does not overwrite $INITRD in memory
    /bin/kexec -l  $1  $INITRDVAR  --command-line="$COMMAND"
    if [ $? -ne 0  ]; then
     echoconsole ""   ".... failed to load kernel $1 ! retrying with overwriting avoided..."
     #/bin/busybox cp -f /$MOUNTDIR/$(/bin/busybox basename $BOOTDEV)/boot/$INITRD  /boot/$INITRD  2>/dev/null
     /bin/kexec -u $1
     /bin/kexec -l $1  $INITRDVAR  --command-line="$COMMAND"
     if [ $? -ne 0  ]; then
       echoconsole ""  " Kernel $1 not loadable! Continuing with the originally booted one...."
       return 2
     fi
    fi
    echoconsole "" ".....starting reboot with kernel $1 ....."
    /bin/kexec -e
    if [ $? -ne 0  ]; then
     echoconsole ""  "..... failed to boot kernel $1 !  Aborting...."
     /bin/kexec -u  $1
     return 1
    fi
    /bin/kexec -u  $1
    return 0
  fi
  echobold "$INITPREF" "...something went wrong in rebooting hardware-optimized kernel $1 !"
  echobold "$INITPREF"  "Probably the kernel $1 or /boot/$INITRD does not exist. Continuing as good as possible with vmlinuz-$KERNVER...."
  return 1
}
#
reboot_optimized_kernel()
{
   local NEWKERNEL NEWINITRD
   set_kernvars "simple"
   NEWKERNEL="`/bin/busyox ls -1 /vmlinuz-$TOPKERNVER.$MAJORKERNVER.$MINORKERNVER.*-$KERNEXTENDU`"
   # if more than one, take the first one 
   NEWKERNEL="`echo $NEWKERNEL | /bin/busyox cut -f1 -d" " 2>/dev/null`"
   if [ "$NEWKERNEL" = "" ]; then 
      return 127
   fi
   NEWINITRD="`/bin/busyox ls -1 /$INITRD-$KERNEXTENDU.*`"
   # if more than one, take the first one 
   NEWINITRD="`echo $NEWINITRD | /bin/busyox cut -f1 -d" " 2>/dev/null`"
   if [ "$NEWINITRD" = "" ]; then 
      return 127
   fi
   
   kexec_reboot $NEWKERNEL  $NEWINITRD    
}
#
echoconsole  "[ i386-functions ]:" "read in!"    
#

